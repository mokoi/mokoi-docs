<?xml-stylesheet href="../common.css"?>
<div xmlns="http://www.w3.org/1999/xhtml">
	<pre>/* String functions
 *
 * (c) Copyright 2005-2007, ITB CompuPhase
 * This file is provided as is (no warranties).
 */
#if defined _string_included
  #endinput
#endif
#define _string_included

///String Functions
native strlen(const string[]);
native strpack(dest[], const source[], maxlength=sizeof dest);
native strunpack(dest[], const source[], maxlength=sizeof dest);
native strcopy(dest[], const source[], maxlength=sizeof dest);
native strcat(dest[], const source[], maxlength=sizeof dest);

native strmid(dest[], const source[], start=0, end=cellmax, maxlength=sizeof dest);
native bool:strins(string[], const substr[], index, maxlength=sizeof string);
native bool:strdel(string[], start, end);

native strcmp(const string1[], const string2[], bool:ignorecase=false, length=cellmax);
native strfind(const string[], const sub[], bool:ignorecase=false, index=0);

native strval(const string[], index=0);
native valstr(dest[], value, bool:pack=false);
native bool:ispacked(const string[]);

native strformat(dest[], size=sizeof dest, bool:pack=false, const format[], {Fixed,Float,_}:...);

native uudecode(dest[], const source[], maxlength=sizeof dest);
native uuencode(dest[], const source[], numbytes, maxlength=sizeof dest);
native memcpy(dest[], const source[], index=0, numbytes, maxlength=sizeof dest);
native urldecode(dest[], const source[], maxlength=sizeof dest, bool:pack=false);
native urlencode(dest[], const source[], maxlength=sizeof dest, bool:pack=false);

native StringLength(const string[]) = strlen;
native StringPack(dest[], const source[], maxlength=sizeof dest) = strpack;
native StringUnpack(dest[], const source[], maxlength=sizeof dest) = strunpack;
native StringCopy(dest[], const source[], maxlength=sizeof dest) = strcopy;
native StringConcatenate(dest[], const source[], maxlength=sizeof dest) = strcat;

native StringExtract(dest[], const source[], start=0, end=cellmax, maxlength=sizeof dest) = strmid;
native bool:StringInsert(string[], const substr[], index, maxlength=sizeof string) = strins;
native bool:StringRemove(string[], start, end) = strdel;

native StringFind(const string[], const sub[], bool:ignorecase=false, index=0)  = strfind;
native StringNumber(dest[], value, bool:pack=false)  = valstr;
native bool:StringIsPacked(const string[]) = ispacked;

native StringFormat(dest[], size=sizeof dest, bool:pack=false, const format[], {Fixed,Float,_}:...) = strformat;

stock bool: StringEqual(const string1[], const string2[], bool:ignorecase=false, length=cellmax)
{
	return strcmp(string1, string2, ignorecase, length) == 0;
}

/***
&lt;function name="StringLength"&gt;
	&lt;summary&gt;Returns the length of the the string&lt;/summary&gt;
	&lt;param name="string[]" default="" type="a"&gt;&lt;/param&gt;
&lt;/function&gt;
&lt;function name="StringPack"&gt;
	&lt;summary&gt;Packs the source string into dest.&lt;/summary&gt;
	&lt;param name="dest[]" default="" type="a"&gt;&lt;/param&gt;
	&lt;param name="source[]" default="" type="a"&gt;&lt;/param&gt;
&lt;/function&gt;
&lt;function name="StringUnpack"&gt;
	&lt;summary&gt;Unpacks the source string into dest.&lt;/summary&gt;
	&lt;param name="dest[]" default="" type="a"&gt;&lt;/param&gt;
	&lt;param name="source[]" default="" type="a"&gt;&lt;/param&gt;
&lt;/function&gt;
&lt;function name="StringCopy"&gt;
	&lt;summary&gt;Copies the source string into dest.&lt;/summary&gt;
	&lt;param name="dest[]" default="" type="a"&gt;&lt;/param&gt;
	&lt;param name="source[]" default="" type="a"&gt;&lt;/param&gt;
&lt;/function&gt;
&lt;function name="StringConcatenate"&gt;
	&lt;summary&gt;Appends the source string on to dest.&lt;/summary&gt;
	&lt;param name="dest[]" default="" type="a"&gt;&lt;/param&gt;
	&lt;param name="source[]" default="" type="a"&gt;&lt;/param&gt;
&lt;/function&gt;
&lt;function name="StringExtract"&gt;
	&lt;summary&gt;Copy part of source string into dest.&lt;/summary&gt;
	&lt;param name="dest[]" default="" type="a"&gt;&lt;/param&gt;
	&lt;param name="source[]" default="" type="a"&gt;&lt;/param&gt;
	&lt;param name="start" default="" type="n"&gt;&lt;/param&gt;
	&lt;param name="end" default="cellmax" type="n"&gt;&lt;/param&gt;
&lt;/function&gt;
&lt;function name="StringInsert"&gt;
	&lt;summary&gt;Insert substr into string at index.&lt;/summary&gt;
	&lt;param name="string[]" default="" type="a"&gt;&lt;/param&gt;
	&lt;param name="substr[]" default="" type="a"&gt;&lt;/param&gt;
	&lt;param name="index" default="" type="n"&gt;&lt;/param&gt;
&lt;/function&gt;
&lt;function name="StringRemove"&gt;
	&lt;summary&gt;Removes part the string.&lt;/summary&gt;
	&lt;param name="string[]" default="" type="a"&gt;&lt;/param&gt;
	&lt;param name="start" default="" type="n"&gt;&lt;/param&gt;
	&lt;param name="end" default="cellmax" type="n"&gt;&lt;/param&gt;
&lt;/function&gt;
&lt;function name="StringFind"&gt;
	&lt;summary&gt;Returns the starting position of the sub string or -1 if it's not found.&lt;/summary&gt;
	&lt;param name="string[]" default="" type="a"&gt;&lt;/param&gt;
	&lt;param name="sub[]" default="" type="a"&gt;&lt;/param&gt;
&lt;/function&gt;
&lt;function name="StringNumber"&gt;
	&lt;summary&gt;Converts a whole number into string 'dest'.&lt;/summary&gt;
	&lt;param name="dest[]" default="" type="a"&gt;&lt;/param&gt;
	&lt;param name="value" default="" type="n"&gt;&lt;/param&gt;
&lt;/function&gt;
&lt;function name="StringIsPacked"&gt;
	&lt;summary&gt;Check if string is packed.&lt;/summary&gt;
	&lt;param name="string[]" default="" type="a"&gt;String to check.&lt;/param&gt;
	&lt;return&gt;True if string has been packed.&lt;/return&gt;
&lt;/function&gt;
&lt;function name="StringFormat"&gt;
	&lt;summary&gt;Prints formatted text to string 'dest'.&lt;/summary&gt;
	&lt;param name="dest[]" default="" type="a"&gt;Destination string.&lt;/param&gt;
	&lt;param name="size" default="_" type="n"&gt;size of destination string.&lt;/param&gt;
	&lt;param name="pack" default="_" type="n"&gt;Pack string contents.&lt;/param&gt;
	&lt;param name="format" default="" type="a"&gt;Format String&lt;/param&gt;
	&lt;param name="..." default="" type="v"&gt; List of Arguments to used to produce the formatted text.&lt;/param&gt;
	&lt;example&gt;
	new string[128];
	strformat(string, _, true, "Text: %s, Color: %x, Number: %d, Fixed: %q\n", "Hello", 0xFFBBAAFF, 42, 50.254);
	DebugText(string);
	&lt;/example&gt;
&lt;/function&gt;
&lt;function name="StringEqual"&gt;
	&lt;summary&gt;Check if the two string are the same.&lt;/summary&gt;
	&lt;param name="string1[]" default="" type="a"&gt;&lt;/param&gt;
	&lt;param name="string2[]" default="" type="a"&gt;&lt;/param&gt;
	&lt;param name="ignorecase" default="false" type="n"&gt;&lt;/param&gt;
&lt;/function&gt;
***/
</pre>
</div>

