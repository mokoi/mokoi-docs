<?xml-stylesheet href="../common.css"?>
<div xmlns="http://www.w3.org/1999/xhtml">
<pre>/* String functions
 *
 * (c) Copyright 2005-2007, ITB CompuPhase
 * This file is provided as is (no warranties).
 */
#if defined _string_included
  #endinput
#endif
#define _string_included

///String Functions
native strlen(const string[]);
native strpack(dest[], const source[], maxlength=sizeof dest);
native strunpack(dest[], const source[], maxlength=sizeof dest);
native strcopy(dest[], const source[], maxlength=sizeof dest);
native strcat(dest[], const source[], maxlength=sizeof dest);

native strmid(dest[], const source[], start=0, end=cellmax, maxlength=sizeof dest);
native bool:strins(string[], const substr[], index, maxlength=sizeof string);
native bool:strdel(string[], start, end);

native strcmp(const string1[], const string2[], bool:ignorecase=false, length=cellmax);
native strfind(const string[], const sub[], bool:ignorecase=false, index=0);

native strval(const string[], index=0);
native valstr(dest[], value, bool:pack=false);
native bool:ispacked(const string[]);

native strformat(dest[], size=sizeof dest, bool:pack=false, const format[], {Fixed,Float,_}:...);

native uudecode(dest[], const source[], maxlength=sizeof dest);
native uuencode(dest[], const source[], numbytes, maxlength=sizeof dest);
native memcpy(dest[], const source[], index=0, numbytes, maxlength=sizeof dest);
native urldecode(dest[], const source[], maxlength=sizeof dest, bool:pack=false);
native urlencode(dest[], const source[], maxlength=sizeof dest, bool:pack=false);

native StringLength(const string[]) = strlen;
native StringPack(dest[], const source[], maxlength=sizeof dest) = strpack;
native StringUnpack(dest[], const source[], maxlength=sizeof dest) = strunpack;
native StringCopy(dest[], const source[], maxlength=sizeof dest) = strcopy;
native StringConcatenate(dest[], const source[], maxlength=sizeof dest) = strcat;

native StringExtract(dest[], const source[], start=0, end=cellmax, maxlength=sizeof dest) = strmid;
native bool:StringInsert(string[], const substr[], index, maxlength=sizeof string) = strins;
native bool:StringRemove(string[], start, end) = strdel;

native StringFind(const string[], const sub[], bool:ignorecase=false, index=0)  = strfind;
native StringNumber(dest[], value, bool:pack=false)  = valstr;
native bool:StringIsPacked(const string[]) = ispacked;

native StringFormat(dest[], size=sizeof dest, bool:pack=false, const format[], {Fixed,Float,_}:...) = strformat;

stock bool: StringEqual(const string1[], const string2[], bool:ignorecase=false, length=cellmax)
{
	return strcmp(string1, string2, ignorecase, length) == 0;
}

/***
&lt;function name=&quot;StringLength&quot;&gt;
	&lt;summary&gt;Returns the length of the the string&lt;/summary&gt;
	&lt;param name=&quot;string[]&quot; default=&quot;&quot; type=&quot;a&quot;&gt;&lt;/param&gt;
&lt;/function&gt;
&lt;function name=&quot;StringPack&quot;&gt;
	&lt;summary&gt;Packs the source string into dest.&lt;/summary&gt;
	&lt;param name=&quot;dest[]&quot; default=&quot;&quot; type=&quot;a&quot;&gt;&lt;/param&gt;
	&lt;param name=&quot;source[]&quot; default=&quot;&quot; type=&quot;a&quot;&gt;&lt;/param&gt;
&lt;/function&gt;
&lt;function name=&quot;StringUnpack&quot;&gt;
	&lt;summary&gt;Unpacks the source string into dest.&lt;/summary&gt;
	&lt;param name=&quot;dest[]&quot; default=&quot;&quot; type=&quot;a&quot;&gt;&lt;/param&gt;
	&lt;param name=&quot;source[]&quot; default=&quot;&quot; type=&quot;a&quot;&gt;&lt;/param&gt;
&lt;/function&gt;
&lt;function name=&quot;StringCopy&quot;&gt;
	&lt;summary&gt;Copies the source string into dest.&lt;/summary&gt;
	&lt;param name=&quot;dest[]&quot; default=&quot;&quot; type=&quot;a&quot;&gt;&lt;/param&gt;
	&lt;param name=&quot;source[]&quot; default=&quot;&quot; type=&quot;a&quot;&gt;&lt;/param&gt;
&lt;/function&gt;
&lt;function name=&quot;StringConcatenate&quot;&gt;
	&lt;summary&gt;Appends the source string on to dest.&lt;/summary&gt;
	&lt;param name=&quot;dest[]&quot; default=&quot;&quot; type=&quot;a&quot;&gt;&lt;/param&gt;
	&lt;param name=&quot;source[]&quot; default=&quot;&quot; type=&quot;a&quot;&gt;&lt;/param&gt;
&lt;/function&gt;
&lt;function name=&quot;StringExtract&quot;&gt;
	&lt;summary&gt;Copy part of source string into dest.&lt;/summary&gt;
	&lt;param name=&quot;dest[]&quot; default=&quot;&quot; type=&quot;a&quot;&gt;&lt;/param&gt;
	&lt;param name=&quot;source[]&quot; default=&quot;&quot; type=&quot;a&quot;&gt;&lt;/param&gt;
	&lt;param name=&quot;start&quot; default=&quot;&quot; type=&quot;n&quot;&gt;&lt;/param&gt;
	&lt;param name=&quot;end&quot; default=&quot;cellmax&quot; type=&quot;n&quot;&gt;&lt;/param&gt;
&lt;/function&gt;
&lt;function name=&quot;StringInsert&quot;&gt;
	&lt;summary&gt;Insert substr into string at index.&lt;/summary&gt;
	&lt;param name=&quot;string[]&quot; default=&quot;&quot; type=&quot;a&quot;&gt;&lt;/param&gt;
	&lt;param name=&quot;substr[]&quot; default=&quot;&quot; type=&quot;a&quot;&gt;&lt;/param&gt;
	&lt;param name=&quot;index&quot; default=&quot;&quot; type=&quot;n&quot;&gt;&lt;/param&gt;
&lt;/function&gt;
&lt;function name=&quot;StringRemove&quot;&gt;
	&lt;summary&gt;Removes part the string.&lt;/summary&gt;
	&lt;param name=&quot;string[]&quot; default=&quot;&quot; type=&quot;a&quot;&gt;&lt;/param&gt;
	&lt;param name=&quot;start&quot; default=&quot;&quot; type=&quot;n&quot;&gt;&lt;/param&gt;
	&lt;param name=&quot;end&quot; default=&quot;cellmax&quot; type=&quot;n&quot;&gt;&lt;/param&gt;
&lt;/function&gt;
&lt;function name=&quot;StringFind&quot;&gt;
	&lt;summary&gt;Returns the starting position of the sub string or -1 if it's not found.&lt;/summary&gt;
	&lt;param name=&quot;string[]&quot; default=&quot;&quot; type=&quot;a&quot;&gt;&lt;/param&gt;
	&lt;param name=&quot;sub[]&quot; default=&quot;&quot; type=&quot;a&quot;&gt;&lt;/param&gt;
&lt;/function&gt;
&lt;function name=&quot;StringNumber&quot;&gt;
	&lt;summary&gt;Converts a whole number into string 'dest'.&lt;/summary&gt;
	&lt;param name=&quot;dest[]&quot; default=&quot;&quot; type=&quot;a&quot;&gt;&lt;/param&gt;
	&lt;param name=&quot;value&quot; default=&quot;&quot; type=&quot;n&quot;&gt;&lt;/param&gt;
&lt;/function&gt;
&lt;function name=&quot;StringIsPacked&quot;&gt;
	&lt;summary&gt;Check if string is packed.&lt;/summary&gt;
	&lt;param name=&quot;string[]&quot; default=&quot;&quot; type=&quot;a&quot;&gt;String to check.&lt;/param&gt;
	&lt;return&gt;True if string has been packed.&lt;/return&gt;
&lt;/function&gt;
&lt;function name=&quot;StringFormat&quot;&gt;
	&lt;summary&gt;Prints formatted text to string 'dest'.&lt;/summary&gt;
	&lt;param name=&quot;dest[]&quot; default=&quot;&quot; type=&quot;a&quot;&gt;Destination string.&lt;/param&gt;
	&lt;param name=&quot;size&quot; default=&quot;_&quot; type=&quot;n&quot;&gt;size of destination string.&lt;/param&gt;
	&lt;param name=&quot;pack&quot; default=&quot;_&quot; type=&quot;n&quot;&gt;Pack string contents.&lt;/param&gt;
	&lt;param name=&quot;format&quot; default=&quot;&quot; type=&quot;a&quot;&gt;Format String&lt;/param&gt;
	&lt;param name=&quot;...&quot; default=&quot;&quot; type=&quot;v&quot;&gt; List of Arguments to used to produce the formatted text.&lt;/param&gt;
	&lt;example&gt;
	new string[128];
	strformat(string, _, true, &quot;Text: %s, Color: %x, Number: %d, Fixed: %q\n&quot;, &quot;Hello&quot;, 0xFFBBAAFF, 42, 50.254);
	DebugText(string);
	&lt;/example&gt;
&lt;/function&gt;
&lt;function name=&quot;StringEqual&quot;&gt;
	&lt;summary&gt;Check if the two string are the same.&lt;/summary&gt;
	&lt;param name=&quot;string1[]&quot; default=&quot;&quot; type=&quot;a&quot;&gt;&lt;/param&gt;
	&lt;param name=&quot;string2[]&quot; default=&quot;&quot; type=&quot;a&quot;&gt;&lt;/param&gt;
	&lt;param name=&quot;ignorecase&quot; default=&quot;false&quot; type=&quot;n&quot;&gt;&lt;/param&gt;
&lt;/function&gt;
***/
</pre>
</div>
