<div xmlns="http://www.w3.org/1999/xhtml"><?xml-stylesheet href="../common.css"?>
<div class="navbar"><a href="Scripting.xml">Scripting</a> &gt; <a href="Pawn.xml">Pawn</a> &gt; Operators</div>
<h3><strong>Notational conventions</strong></h3>

The operation of some operators depends on the speci&amp;iuml;&amp;not;Åc kinds of operands. <br/>
Therefore, operands are notated thus: <br/>
<strong>e</strong> - any expression; <br/>
<strong>v</strong> - any expression to which a value can be assigned (&amp;acirc;Äúlvalue&amp;acirc;Äù expressions); <br/>
<strong>a</strong> - an array; <br/>
<strong>f</strong> - a function; <br/>
<p><strong>s</strong> - a symbol &amp;acirc;Äîwhich is a variable, a constant or a function.</p>
<h3><strong>Expressions</strong></h3>

<p>An expression consists of one or more operands with an operator. The operand can be a variable, a constant or another expression. An expression followed by a semicolon is a statement.</p>

Listing: examples of expressions
<pre>
v++
f(a1, a2)
v = (ia1 * ia2) / ia3
</pre>
<h3>Arithmetic</h3>

<strong>+</strong> <em>&quot;e1 + e2&quot;</em> <br/>
Results in the addition of e1 and e2. <br/>
<strong>-</strong> <em>&quot;e1 - e2&quot;</em> <br/>
Results in the subtraction of e1 and e2. <br/>
<strong>-e</strong> <br/>
Results in the arithmetic negation of a (two's complement).
         <ul><li><em>&quot;e1 * e2&quot;</em></li></ul>Results in the multiplication of e1 and e2. <br/>
<strong>/</strong> <em>&quot;e1 / e2&quot;</em> <br/>
Results in the division of e1 by e2. The result is truncated to the nearest integral value that is less than or equal to the quotient. Both negative and positive values are rounded down, i.e. towards &amp;acirc;àí&amp;acirc;àû. <br/>
<strong>%</strong> <em>&quot;e1 % e2&quot;</em> <br/>
Results in the remainder of the division of e1 by e2. The sign of the remainder follows the sign of e2. Integer division and remainder have the Euclidean property: D = q*d + r, where q = D/d and r = D%d. <br/>
<strong>++</strong> <em>&quot;v++&quot;</em> <br/>
increments v by 1; the result if the expression is the value of <br/>
v before it is incremented. <br/>
++v <br/>
increments v by 1; the result if the expression is the value of <br/>
<p>v after it is incremented.</p>

-- v-- <br/>
decrements v by 1; the result if the expression is the value of <br/>
v before it is decremented. <br/>
--v <br/>
decrements v by 1; the result if the expression is the value of <br/>
<p>v after it is decremented.</p>

Notes: The unary + is not de&amp;iuml;&amp;not;Åned in pawn. <br/>
The operators ++ and -- modify the operand. The operand <br/>
<p>must be an lvalue.</p>
<br/>
&amp;acirc;Ä&amp;cent; Bit manipulation <br/>
~ ~e <br/>
<p>results in the one's complement of e.</p>
<br/>
  e1 &gt;&gt; e2 <br/>
results in the arithmetic shift to the right of e1 by e2 bits. <br/>
The shift operation is signed: the leftmost bit of e1 is copied <br/>
<p>to vacant bits in the result.</p>
<p>Operators and expressions 107</p>

   e1 &gt;&gt;&gt; e2 <br/>
results in the logical shift to the right of e1 by e2 bits. The <br/>
shift operation is unsigned: the vacant bits of the result are <br/>
<p>&amp;iuml;&amp;not;Ålled with zeros.</p>

&lt;&lt; e1 &lt;&lt; e2 <br/>
results in the value of e1 shifted to the left by e2 bits; the <br/>
rightmost bits are set to zero. There is no distinction between <br/>
<p>an arithmetic and a logical left shift</p>

&amp; e1 &amp; e2 <br/>
<p>results in the bitwise logical &amp;acirc;Äúand&amp;acirc;Äù of e1 and e2.</p>

| e1 | e2
<p>results in the bitwise logical &amp;acirc;Äúor&amp;acirc;Äù of e1 and e2.</p>
<pre>^</pre> e1 <pre>^</pre> e2 <br/>
<p>results in the bitwise &amp;acirc;Äúexclusive or&amp;acirc;Äù of e1 and e2.</p>
<br/>
<p>&amp;acirc;Ä&amp;cent; Assignment</p>

The result of an assignment expression is the value of the left operand after <br/>
<p>the assignment. The left operand may not be tagged. Tag names: 67</p>
<h2>v</h2>

e assigns the value of e to variable v.
<h2>v</h2>

a assigns array a to variable v; v must be an array with the <br/>
same size and dimensions as a; a may be a string or a literal <br/>
<p>array.</p>

Note: the following operators combine an assignment with an arith- <br/>
metic or a bitwise operation; the result of the expression is <br/>
the value of the left operand after the arithmetic or bitwise <br/>
<p>operation.</p>

+= v += e <br/>
increments v with e. <br/>
-= v -= e <br/>
<p>decrements v with e</p>
<p>108 Operators and expressions</p>

*= v *= e <br/>
multiplies v with e <br/>
/= v /= e <br/>
divides v by e. <br/>
%= v %= e <br/>
assigns the remainder of the division of v by e to v. <br/>
&gt;&gt;= v &gt;&gt;= e <br/>
shifts v arithmetically to the right by e bits. <br/>
&gt;&gt;&gt;= v &gt;&gt;&gt;= e <br/>
shifts v logically to the right by e bits. <br/>
&lt;&lt;= v &lt;&lt;= e <br/>
shifts v to the left by e bits. <br/>
&amp;= v &amp;= e <br/>
applies a bitwise &amp;acirc;Äúand&amp;acirc;Äù to v and e and assigns the result to v. <br/>
|= v |= e
applies a bitwise &amp;acirc;Äúor&amp;acirc;Äù to v and e and assigns the result to v.
<pre>^</pre>= v <pre>^</pre>= e <br/>
applies a bitwise &amp;acirc;Äúexclusive or&amp;acirc;Äù to v and e and assigns the <br/>
<p>result to v.</p>
<br/>
<p>&amp;acirc;Ä&amp;cent; Relational</p>

A logical &amp;acirc;Äúfalse&amp;acirc;Äù is represented by an integer value of 0; a logical &amp;acirc;Äútrue&amp;acirc;Äù is <br/>
represented by any value other than 0. Value results of relational expressions <br/>
<p>are either 0 or 1, and their tag is set to &amp;acirc;Äúbool:&amp;acirc;Äù.</p>
<h3>e1</h3>

<p>e2 results in a logical &amp;acirc;Äútrue&amp;acirc;Äù if e1 is equal to e2.</p>

!= e1 != e2
<p>results in a logical &amp;acirc;Äútrue&amp;acirc;Äù if e1 di&amp;iuml;&amp;not;Äers from e2.</p>

Note: the following operators may be &amp;acirc;Äúchained&amp;acirc;Äù, as in the expression <br/>
&amp;acirc;Äúe1 &lt;= e2 &lt;= e3&amp;acirc;Äù, with the semantics that the result is &amp;acirc;Äú1&amp;acirc;Äù <br/>
<p>if all individual comparisons hold and &amp;acirc;Äú0&amp;acirc;Äù otherwise.</p>

&lt; e1 &lt; e2 <br/>
<p>results in a logical &amp;acirc;Äútrue&amp;acirc;Äù if e1 is smaller than e2.</p>
<p>Operators and expressions 109</p>

&lt;= e1 &lt;= e2 <br/>
<p>results in a logical &amp;acirc;Äútrue&amp;acirc;Äù if e1 is smaller than or equal to e2.</p>
<br/>
 e1 &gt; e2 <br/>
<p>results in a logical &amp;acirc;Äútrue&amp;acirc;Äù if e1 is greater than e2.</p>
<br/>
&gt;= e1 &gt;= e2 <br/>
<p>results in a logical &amp;acirc;Äútrue&amp;acirc;Äù if e1 is greater than or equal to e2.</p>
<p></p>
<br/>
<p>&amp;acirc;Ä&amp;cent; Boolean</p>

A logical &amp;acirc;Äúfalse&amp;acirc;Äù is represented by an integer value of 0; a logical &amp;acirc;Äútrue&amp;acirc;Äù is <br/>
represented by any value other than 0. Value results of Boolean expressions <br/>
<p>are either 0 or 1, and their tag is set to &amp;acirc;Äúbool&amp;acirc;Äù.</p>
<br/>
! !e
<p>results to a logical &amp;acirc;Äútrue&amp;acirc;Äù if e was logically &amp;acirc;Äúfalse&amp;acirc;Äù.</p>
<br/>
|| e1
results to a logical &amp;acirc;Äútrue&amp;acirc;Äù if either e1 or e2 (or both) are <br/>
logically &amp;acirc;Äútrue&amp;acirc;Äù. The expression e2 is only evaluated if e1 is <br/>
<p>logically &amp;acirc;Äúfalse&amp;acirc;Äù.</p>

&amp;&amp; e1 &amp;&amp; e2 <br/>
results to a logical &amp;acirc;Äútrue&amp;acirc;Äù if both e1 and e2 are logically <br/>
&amp;acirc;Äútrue&amp;acirc;Äù. The expression e2 is only evaluated if e1 is logically <br/>
<p>&amp;acirc;Äútrue&amp;acirc;Äù.</p>
<br/>
&amp;acirc;Ä&amp;cent; Miscellaneous <br/>
[ ] a[e] <br/>
<p>array index: results to cell e from array a.</p>
<br/>
{ } a{e} <br/>
<p>array index: results to character e from &amp;acirc;Äúpacked&amp;acirc;Äù array a.</p>
<p>110 Operators and expressions</p>

( ) f(e1,e2,...eN) <br/>
results to the value returned by the function f. The function <br/>
is called with the arguments e1, e2, . . .eN. The order of eval- <br/>
uation of the arguments is unde&amp;iuml;&amp;not;Åned (an implementation may <br/>
<p>choose to evaluate function arguments in reversed order).</p>
<br/>
? : e1 ? e2 : e3 <br/>
results in either e2 or e3, depending on the value of e1. The <br/>
conditional expression is a compound expression with a two <br/>
part operator, &amp;acirc;Äú?&amp;acirc;Äù and &amp;acirc;Äú:&amp;acirc;Äù. Expression e2 is evaluated if e1 <br/>
<p>is logically &amp;acirc;Äútrue&amp;acirc;Äù, e3 is evaluated if e1 is logically &amp;acirc;Äúfalse&amp;acirc;Äù.</p>

: tagname: e
tag override; the value of the expression e does not change, <br/>
<p>but its tag changes. See page 67 for more information.</p>
<br/>
, e1, e2 <br/>
results in e2, e1 is evaluated before e2. If used in function <br/>
argument lists or a conditional expression, the comma expres- <br/>
<p>sion must be surrounded by parentheses.</p>
<br/>
defined defined s <br/>
results in the value 1 if the symbol is de&amp;iuml;&amp;not;Åned. The symbol <br/>
may be a constant (page 98), or a global or local variable. <br/>
<p>The tag of this expression is bool:.</p>
<p></p>

sizeof sizeof s <br/>
results in the size in &amp;acirc;Äúelements&amp;acirc;Äù of the speci&amp;iuml;&amp;not;Åed variable. For <br/>
simple variables and for arrays with a single dimension, an <br/>
element is a cell. For multi-dimensional arrays, the result is <br/>
the number of array elements in that dimension &amp;acirc;Äîappend [] <br/>
to the array name to indicate a lower/more minor dimension. <br/>
If the size of a variable is unknown, the result is zero. <br/>
When used in a default value for a function argument, the ex- <br/>
pression is evaluation at the point of the function call, instead <br/>
of in the function de&amp;iuml;&amp;not;Ånition. <br/>
state state s <br/>
See also page 116 <br/>
where s is the name of a state that is optionally pre&amp;iuml;&amp;not;Åxed with for state speci&amp;iuml;&amp;not;Åers <br/>
the automaton name, this operator results in the value 1 if <br/>
the automatons is in the indicated state and in 0 otherwise. <br/>
<p>The tag of this expression is bool:.</p>

tagof tagof s <br/>
results in the a unique number that represents the tag of the <br/>
variable, the constant, the function result or the tag label. <br/>
When used in a default value for a function argument, the ex- <br/>
pression is evaluation at the point of the function call, instead <br/>
<p>of in the function de&amp;iuml;&amp;not;Ånition.</p>

char e char <br/>
results the number of cells that are needed to hold a packed <br/>
<p>array of e characters.</p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<br/>
<p>&amp;acirc;Ä&amp;cent; Operator precedence</p>

The table beneath groups operators with equal precedence, starting with the <br/>
<p>operator group with the highest precedence at the top of the table.</p>

If the expression evaluation order is not explicitly established by parentheses, <br/>
it is determined by the association rules. For example: a*b/c is equivalent <br/>
with (a*b)/c because of the left-to-right association, and a=b=c is equivalent <br/>
<p>with a=(b=c).</p>

() function call left-to-right <br/>
[] array index (cell) <br/>
{} array index (character) <br/>
! logical not right-to-left
~ one's complement <br/>
- two's complement (unary minus) <br/>
++ increment <br/>
-- decrement
: tag override
char convert number of packed characters to cells <br/>
defined symbol de&amp;iuml;&amp;not;Ånition status <br/>
sizeof symbol size in &amp;acirc;Äúelements&amp;acirc;Äù <br/>
state automaton/state condition <br/>
tagof unique number for the tag
 <ul><li>multiplication left-to-right</li></ul>/ division <br/>
% remainder <br/>
+ addition left-to-right <br/>
- subtraction <br/>
  arithmetic shift right left-to-right <br/>
   logical shift right <br/>
&lt;&lt; shift left <br/>
&amp; bitwise and left-to-right
<pre>^</pre> bitwise exclusive or left-to-right <br/>
| bitwise or left-to-right
&lt; smaller than left-to-right <br/>
&lt;= smaller than or equal to <br/>
 greater than <br/>
&gt;= greater than or equal to
== equality left-to-right
!= inequality
<p>&amp;&amp; logical and left-to-right</p>

? : conditional right-to-left
= assignment right-to-left
*= /= %= += -= &gt;&gt;= &gt;&gt;&gt;= &lt;&lt;= &amp;= <pre>^</pre>= |= <br/>
<p>, comma left-to-right</p>


</div>