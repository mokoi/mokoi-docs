<?xml-stylesheet href="../common.css"?>
<div xmlns="http://www.w3.org/1999/xhtml">
	<pre>#if defined _project_included
	#endinput
#endif

#define _project_included

//title Main Functions

#include &lt;fixed&gt;
#include &lt;enums&gt;

native printf(const format[], ...);

///Engine Functions 
/***
&lt;function name="KeyboardWatch"&gt;
	&lt;summary&gt;Send Keyboard input to KeyboardInput function in the current entity.&lt;/summary&gt;
	&lt;param name="able" default="" type="n"&gt;&lt;/param&gt;
	&lt;example&gt;
	forward public KeyboardInput( unicode );
	public KeyboardInput( unicode )
	{
		DebugText("Input: %c %d", unicode, unicode)
	}

	public Init( ... )
	{
		KeyboardWatch(true);
	}
	&lt;/example&gt;
&lt;/function&gt;
&lt;function name="GameState"&gt;
	&lt;summary&gt;Get/Set Global State.&lt;/summary&gt;
	&lt;param name="newstate" default="-1" type="n"&gt;Set new engine state, -1 to skip.&lt;/param&gt;
	&lt;return&gt;Current state of the engine.&lt;/return&gt;
	&lt;example&gt;
	if ( GameState() == 0 )
	{
		if ( InputButton(0) )
		{
			GameState(1);
		}
	}
	else
	{
		MoveEntity();
	}
	&lt;/example&gt;
&lt;/function&gt;
&lt;function name="GameFrame"&gt;
	&lt;summary&gt;Return the length of last frame in milliseconds.&lt;/summary&gt;
	&lt;return&gt;Length of time of last frame.&lt;/return&gt;
	&lt;example&gt;
	new time = GameFrame();
	DebugText("Last Frame took %d milliseconds", time);
	&lt;/example&gt;
&lt;/function&gt;
&lt;function name="GameFrame2"&gt;
	&lt;summary&gt;Return the length of last frame in seconds as a fixed point number.&lt;/summary&gt;
	&lt;return&gt;Length of time of last frame.&lt;/return&gt;
	&lt;example&gt;
	new Fixed:time = GameFrame2();
	DebugText("Last Frame took %q seconds", time);
	&lt;/example&gt;
&lt;/function&gt;
***/
native KeyboardWatch( able );
native GameState(newstate = -1);
native GameFrame();
native Fixed:GameFrame2() = GameFrame;

///Log Functions
/***
&lt;function name="GameLog"&gt;
	&lt;summary&gt;Prints formatted text to a text file.&lt;/summary&gt;
	&lt;param name="text[]" default="" type="a"&gt;Format string.%c print a character at this position. %d print a number at this position in decimal radix. %f print a floating point number at this position. %q print a fixed point number at this position. %s print a character string at this position. %x print a number at this position in hexadecimal radix&lt;/param&gt;
	&lt;param name="..." default="" type="v"&gt;List of Arguments to used to produce the formatted text&lt;/param&gt;
	&lt;example&gt;
	GameLog("Doing Something :)");
	GameLog("Text: %s, Color: %x, Number: %d, Fixed: %q\n", "Hello", 0xFFBBAAFF, 42, 50.254); // Outputs Text: Hello, Color: FFBBAAFF, Number: 42, Fixed: 50.254
	GameLog("Text: %s, Color: %d, Number: %05d, Fixed: %.1q\n", "Hello", 0xFFBBAAFF, 42, 50.254); // Outputs Text: Hello, Color: -4478209, Number: 00042, Fixed: 50.3
	&lt;/example&gt;
&lt;/function&gt;
&lt;function name="DebugText"&gt;
	&lt;summary&gt;Prints formatted text to the debug console.&lt;/summary&gt;
	&lt;param name="text[]" default="" type="a"&gt;Format string. %c print a character at this position. %d print a number at this position in decimal radix. %f print a floating point number at this position. %q print a fixed point number at this position. %s print a character string at this position. %x print a number at this position in hexadecimal radix&lt;/param&gt;
	&lt;param name="..." default="" type="v"&gt;List of Arguments to used to produce the formatted text.&lt;/param&gt;
	&lt;example&gt;
	DebugText("Doing Something :)");
	DebugText("Text: %s, Color: %x, Number: %d, Fixed: %q\n", "Hello", 0xFFBBAAFF, 42, 50.254); // Outputs Text: Hello, Color: FFBBAAFF, Number: 42, Fixed: 50.254
	DebugText("Text: %s, Color: %d, Number: %05d, Fixed: %.1q\n", "Hello", 0xFFBBAAFF, 42, 50.254); // Outputs Text: Hello, Color: -4478209, Number: 00042, Fixed: 50.3
	&lt;/example&gt;
&lt;/function&gt;

***/
native GameLog( text[], {Fixed,_}:... ) = printf;
native DebugText( text[], {Fixed,_}:... );

///Save Functions
/***
&lt;function name="GameSave"&gt;
	&lt;summary&gt;Save Current Game.&lt;/summary&gt;
	&lt;param name="slot" default="" type="n"&gt;Save slot to use, 1-9 are available.&lt;/param&gt;
	&lt;param name="detail[64]" default="" type="a"&gt;256 bytes of extra save data, for uses such as high scores, player name, time of save. This can be access via other games if feature is enable.&lt;/param&gt;
&lt;/function&gt;
&lt;function name="GameLoad"&gt;
	&lt;summary&gt;Load Game from Slot.&lt;/summary&gt;
	&lt;param name="slot" default="" type="n"&gt;Save slot to use, 1-9 are available.&lt;/param&gt;
&lt;/function&gt;
&lt;function name="GameSaveHibernate"&gt;
	&lt;summary&gt;Hibernate a game&lt;/summary&gt;
&lt;/function&gt;
&lt;function name="GameGetDetails"&gt;
	&lt;summary&gt;Get Save Game Details.&lt;/summary&gt;
	&lt;param name="slot" default="" type="n"&gt;Save slot to use, 0-9 are available.&lt;/param&gt;
	&lt;param name="array[64]" default="" type="a"&gt;Array to store the information in.&lt;/param&gt;
	&lt;example&gt;
	new array[64];
	GameGetDetails(0, array);
	highscore = array[0];
	&lt;/example&gt;
&lt;/function&gt;
&lt;function name="GameDetails"&gt;
	&lt;summary&gt;Get another game save details.&lt;/summary&gt;
	&lt;param name="gameid" default="" type="n"&gt;ID to the game you wish to access.&lt;/param&gt;
	&lt;param name="slot" default="" type="n"&gt;Save slot to use, 1-9 are available.&lt;/param&gt;
	&lt;param name="array[64]" default="" type="a"&gt;Array to store the information in.&lt;/param&gt;
	&lt;example&gt;
	new array[64];
	GameDetails(prequel_id, 0, array);
	played_prequel = array[0];
	&lt;/example&gt;
&lt;/function&gt;
&lt;function name="GameHasSave"&gt;
	&lt;summary&gt;Check if file exist.&lt;/summary&gt;
	&lt;param name="slot" default="" type="n"&gt;Save slot to use, 1-9 are available.&lt;/param&gt;
&lt;/function&gt;
&lt;function name="GameRemoveSave"&gt;
	&lt;summary&gt;Remove Save Game.&lt;/summary&gt;
	&lt;param name="slot" default="" type="n"&gt;Save slot to use, 1-9 are available.&lt;/param&gt;
&lt;/function&gt;
***/
native GameLoad(slot);
native GameSaveHibernate();
native GameSave(slot, detail[64],  maxlength=sizeof detail);
native GameGetDetails(slot, array[64], bool:pack_array = false, maxlength=sizeof array);
native GameDetails(gameid, slot, array[64], bool:pack_array = false, maxlength=sizeof array);

native GameHasSave(slot);
native GameRemoveSave(slot);


///Input Functions
/***
&lt;function name="InputButton"&gt;
	&lt;summary&gt;Returns Button value for Player.&lt;/summary&gt;
	&lt;param name="input" default="" type="n"&gt;A value between 0-15.&lt;/param&gt;
	&lt;param name="player" default="0" type="n"&gt;0 for current player otherwise the selected player.&lt;/param&gt;
	&lt;return&gt;0 for un-pressed button, 1 for pressed button, 2 for held down button&lt;/return&gt;
	&lt;example&gt;
	if ( InputButton(0,0) == 1 )
		Shoot();
	&lt;/example&gt;
&lt;/function&gt;
&lt;function name="InputAxis"&gt;
	&lt;summary&gt;Returns Axis value for Player.&lt;/summary&gt;
	&lt;param name="axis" default="" type="n"&gt;A value between 0-5, this representing x1,y1,z1,x2,y2,z2 axis.&lt;/param&gt;
	&lt;param name="player" default="0" type="n"&gt;0 for current player otherwise the selected player.&lt;/param&gt;
	&lt;return&gt;Value between -255 and 255.&lt;/return&gt;
	&lt;example&gt;
	if ( InputButton(1,0) == 255 )
		MoveUp();
	&lt;/example&gt;
&lt;/function&gt;
&lt;function name="InputPointer"&gt;
	&lt;summary&gt;Returns Pointer value for Player.&lt;/summary&gt;
	&lt;param name="axis" default="" type="n"&gt;0 for x axis, 1 for y axis.&lt;/param&gt;
	&lt;param name="player" default="0" type="n"&gt;0 for current player otherwise the selected player.&lt;/param&gt;
	&lt;return&gt;Value the current value of axis of mouse or touchscreen.&lt;/return&gt;
	&lt;example&gt;
	if ( InputButton(0,0) == 1 )
		ShootAt(InputPointer(0,0), InputPointer(1,0));
	&lt;/example&gt;
&lt;/function&gt;
&lt;function name="InputButtonSet"&gt;
	&lt;summary&gt;Set Button value for the Player.&lt;/summary&gt;
	&lt;param name="input" default="" type="n"&gt;A value between 0-15.&lt;/param&gt;
	&lt;param name="value" default="" type="n"&gt;0 for un-pressed button, 1 for pressed button, 2 for held down button&lt;/param&gt;
	&lt;param name="player" default="0" type="n"&gt;0 for current player otherwise the selected player.&lt;/param&gt;
&lt;/function&gt;
&lt;function name="InputAxisSet"&gt;
	&lt;summary&gt;Set Axis value for the Player.&lt;/summary&gt;
	&lt;param name="axis" default="" type="n"&gt;A value between 0-5, this representing x1,y1,z1,x2,y2,z2 axis.&lt;/param&gt;
	&lt;param name="value" default="" type="n"&gt;Value between -255 and 255.&lt;/param&gt;
	&lt;param name="player" default="0" type="n"&gt;0 for current player otherwise the selected player.&lt;/param&gt;
&lt;/function&gt;
&lt;function name="InputPointerSet"&gt;
	&lt;summary&gt;Set Pointer value for the Player.&lt;/summary&gt;
	&lt;param name="axis" default="" type="n"&gt;0 for x axis, 1 for y axis.&lt;/param&gt;
	&lt;param name="value" default="" type="n"&gt;&lt;/param&gt;
	&lt;param name="player" default="0" type="n"&gt;0 for current player otherwise the selected player.&lt;/param&gt;
&lt;/function&gt;
***/
native InputButton(input, player = 0);
native InputAxis(axis, player = 0);
native InputPointer(axis, player = 0);
native InputButtonSet(input, value, player = 0);
native InputAxisSet(axis, value, player = 0);
native InputPointerSet(axis, value, player = 0);
native InputSetDefault(player);
///Misc Functions 
/***
&lt;function name="MiscGetWidth"&gt;
	&lt;summary&gt;Get Width of Map, Screen or Sprite.&lt;/summary&gt;
	&lt;param name="id[]" default="" type="a"&gt;Name of sprite or "__screen" for screen, "__map" for standard map and "map" for current map.&lt;/param&gt;
	&lt;return&gt;Width of Map, Screen or Sprite.&lt;/return&gt;
&lt;/function&gt;
&lt;function name="MiscGetHeight"&gt;
	&lt;summary&gt;Get Height of Map, Screen or Sprite.&lt;/summary&gt;
	&lt;param name="id[]" default="" type="a"&gt;Name of sprite or "__screen" for screen, "__map" for standard map and "map" for current map.&lt;/param&gt;
	&lt;return&gt;Height of Map, Screen or Sprite.&lt;/return&gt;
&lt;/function&gt;
***/
native MiscGetWidth(id[]);
native MiscGetHeight(id[]);

///Language Functions
/***
&lt;function name="LanguageString"&gt;
	&lt;summary&gt;Get String from Language File.&lt;/summary&gt;
	&lt;param name="line" default="" type="n"&gt;line of language wanted.&lt;/param&gt;
	&lt;param name="returnstring[]" default="" type="a"&gt;String to store language string.&lt;/param&gt;
&lt;/function&gt;
&lt;function name="LanguageSet"&gt;
	&lt;summary&gt;Loads a new language set. note: previous strings may have updated.&lt;/summary&gt;
	&lt;param name="lang[]" default="" type="a"&gt;Two letter language code &lt;/param&gt;
&lt;/function&gt;
***/
native LanguageString(line, returnstring[], maxlength=sizeof returnstring);
native LanguageSet(lang[], maxlength=sizeof lang);

///Dialog Functions
/***
&lt;function name="DialogShow"&gt;
	&lt;summary&gt;Shows Dialog box.&lt;/summary&gt;
	&lt;param name="line" default="" type="n"&gt;the requested line.&lt;/param&gt;
	&lt;param name="callback[]" default="&amp;quot;dialogbox&amp;quot;" type="a"&gt;Function to call in the main script.&lt;/param&gt;
&lt;/function&gt;
&lt;function name="DialogGetString"&gt;
	&lt;summary&gt;Get String from Dialog File.&lt;/summary&gt;
	&lt;param name="line" default="" type="n"&gt;the requested line.&lt;/param&gt;
	&lt;param name="returnstring[]" default="" type="a"&gt;&lt;/param&gt;
&lt;/function&gt;
&lt;function name="DialogPlayAudio"&gt;
	&lt;summary&gt;Play Dialog.&lt;/summary&gt;
	&lt;param name="line" default="" type="n"&gt;the requested line.&lt;/param&gt;
&lt;/function&gt;
***/
native DialogShow(line, callback{} = "dialogbox");
native DialogGetString(line, returnstring[], maxlength=sizeof returnstring);
native DialogPlayAudio(line);

///Audio Functions 
/***
&lt;function name="AudioVolume"&gt;
	&lt;summary&gt;Sets Audio device volume.&lt;/summary&gt;
	&lt;param name="AudioDevice:device" default="" type="n"&gt;The Audio device you wish to change.&lt;/param&gt;
	&lt;param name="level" default="-1" type="n"&gt;Requested Volume level.&lt;/param&gt;
	&lt;return&gt;Current volume level&lt;/return&gt;
&lt;/function&gt;
&lt;function name="AudioPlaySound"&gt;
	&lt;summary&gt;Play Sound Effect. Also return length of file in seconds.&lt;/summary&gt;
	&lt;param name="file[]" default="" type="a"&gt;filename of the sound effect.&lt;/param&gt;
	&lt;param name="x" default="-1" type="n"&gt;X-axis screen position of the sound.&lt;/param&gt;
	&lt;param name="y" default="-1" type="n"&gt;y-axis screen position of the sound.&lt;/param&gt;
	&lt;return&gt;Length of the audio file.&lt;/return&gt;
&lt;/function&gt;
&lt;function name="AudioPlayMusic"&gt;
	&lt;summary&gt;Play Music.&lt;/summary&gt;
	&lt;param name="file[]" default="" type="a"&gt;Filename of the music you wish to play.&lt;/param&gt;
	&lt;param name="loop" default="1" type="n"&gt;Set to false to play music only once.&lt;/param&gt;
	&lt;param name="fadeLength" default="0" type="n"&gt;The length of fade in milliseconds&lt;/param&gt;
&lt;/function&gt;
***/
native AudioVolume(AudioDevice:device, level = -1);
native AudioPlaySound(file[], x = -1, y = -1);
native AudioPlayMusic(file[], loop = 1, fadeLength = 0);

///Config Functions
/***
&lt;function name="ConfigGetString"&gt;
	&lt;summary&gt;Get Engine config as a string.&lt;/summary&gt;
	&lt;param name="config[]" default="" type="a"&gt;&lt;/param&gt;
	&lt;param name="value[]" default="" type="a"&gt;&lt;/param&gt;
&lt;/function&gt;
&lt;function name="ConfigGetNumber"&gt;
	&lt;summary&gt;Get Engine config as a number.&lt;/summary&gt;
	&lt;param name="config[]" default="" type="a"&gt;&lt;/param&gt;
	&lt;return&gt;A number from game settings, 0 if no value is found or not is not a number.&lt;/return&gt;
&lt;/function&gt;
&lt;function name="ConfigSetString"&gt;
	&lt;summary&gt;Update Engine config.&lt;/summary&gt;
	&lt;param name="config[]" default="" type="a"&gt;&lt;/param&gt;
	&lt;param name="value[]" default="" type="a"&gt;&lt;/param&gt;
&lt;/function&gt;
***/
native ConfigGetString(config[], value[], maxlength=sizeof value);
native ConfigGetNumber(config[]);
native ConfigSetString(config[], value[]);

///File Listing Functions
/***
&lt;function name="FileGetList"&gt;
	&lt;summary&gt;List File in a directory.&lt;/summary&gt;
	&lt;param name="strings[][]" default="" type="a"&gt;Stores file name in directory.&lt;/param&gt;
	&lt;param name="directory[]" default="&amp;quot;map&amp;quot;" type="a"&gt;Directory name.&lt;/param&gt;
&lt;/function&gt;
***/
native FileGetList(strings[][], directory{} = "map", size=sizeof strings);
</pre>
</div>

