<?xml-stylesheet href="../common.css"?>
<div xmlns="http://www.w3.org/1999/xhtml">
	<pre>#if defined _entities_included
  #endinput
#endif
#define _entities_included

//title Entity Functions

#include &lt;enums&gt;
#include &lt;fixed&gt;


#define ARG_NUMBER	'n'
#define ARG_RETURN_NUMBER	'd'
#define ARG_ARRAY	'a'
#define ARG_STRING	's'
#define ARG_END	'\0'

///Entity Position Functions
/***
&lt;function name="EntitySetPosition"&gt;
	&lt;summary&gt;Set Entities position on current map.&lt;/summary&gt;
	&lt;param name="Fixed:x" default="_" type="n"&gt;New Position. Pass cellmin to skip update that value.&lt;/param&gt;
	&lt;param name="Fixed:y" default="_" type="n"&gt;New Position. Pass cellmin to skip update that value.&lt;/param&gt;
	&lt;param name="Fixed:z" default="_" type="n"&gt;New Position. Pass cellmin to skip update that value.&lt;/param&gt;
	&lt;param name="id" default="_" type="n"&gt;Entity ID.&lt;/param&gt;
&lt;/function&gt;
&lt;function name="EntityGetPosition"&gt;
	&lt;summary&gt;Get Entity position on current map.&lt;/summary&gt;
	&lt;param name="&amp;amp;Fixed:x" default="" type="n"&gt;Variable to store Position.&lt;/param&gt;
	&lt;param name="&amp;amp;Fixed:y" default="" type="n"&gt;Variable to store Position.&lt;/param&gt;
	&lt;param name="&amp;amp;Fixed:z" default="" type="n"&gt;Variable to store Position.&lt;/param&gt;
	&lt;param name="id" default="_" type="n"&gt;Entity ID.&lt;/param&gt;
&lt;/function&gt;
***/
native EntitySetPosition(Fixed:x = Fixed:cellmin, Fixed:y = Fixed:cellmin, Fixed:z = Fixed:cellmin, id = SELF);
native EntityGetPosition(&amp;Fixed:x, &amp;Fixed:y, &amp;Fixed:z, id = SELF);


///Entity Functions
/***
&lt;function name="EntityHash"&gt;
	&lt;summary&gt;Convert Entity Name to hash&lt;/summary&gt;
	&lt;param name="id_string[]" default="" type="a"&gt;ID to give the entity.&lt;/param&gt;
	&lt;return&gt;Returns the Entity Hash.&lt;/return&gt;
&lt;/function&gt;
&lt;function name="EntityCreate"&gt;
	&lt;summary&gt;Creates a new entity.&lt;/summary&gt;
	&lt;param name="parententity[]" default="&amp;quot;&amp;quot;" type="a"&gt;Entity File name.&lt;/param&gt;
	&lt;param name="id_string[]" default="&amp;quot;&amp;quot;" type="a"&gt;ID to give the entity.&lt;/param&gt;
	&lt;param name="x" default="" type="n"&gt;position to give the the entity.&lt;/param&gt;
	&lt;param name="y" default="" type="n"&gt;position to give the the entity.&lt;/param&gt;
	&lt;param name="z" default="" type="n"&gt;position to give the the entity.&lt;/param&gt;
	&lt;param name="map_id" default="CURRENT_MAP" type="n"&gt;Map to create it on. CURRENT_MAP will created it on the current map. GLOBAL_MAP with create a global entity which always on.&lt;/param&gt;
	&lt;param name="args[]" default="''''" type="a"&gt;Defines the follow arguments that will be passed to the entity Init function.
	 a - Array, last value must be CELLMIN
	 d - Value, passed by reference
	 n - Value, passed by value
	 s - String
	 "snsn" means that the follow argument you pass will be a string, a number, a string and a number.
	&lt;/param&gt;
	&lt;param name="..." default="" type="v"&gt;List of Arguments to pass to the entity Init function. &lt;/param&gt;
	&lt;return&gt;0 on error, otherwise it returns the Entity Hash.&lt;/return&gt;
&lt;/function&gt;
&lt;function name="EntityDelete"&gt;
	&lt;summary&gt;Deletes a entity.&lt;/summary&gt;
	&lt;param name="id" default="_" type="n"&gt;Entity ID Hash.&lt;/param&gt;
&lt;/function&gt;
&lt;function name="EntityGetSetting"&gt;
	&lt;summary&gt;Get stored setting for entity. These are set via the Runtime Options.&lt;/summary&gt;
	&lt;param name="key[]" default="" type="a"&gt;Name of Setting.&lt;/param&gt;
	&lt;param name="string[]" default="" type="a"&gt;String to store value in.&lt;/param&gt;
	&lt;param name="id" default="_" type="n"&gt;Entity ID Hash.&lt;/param&gt;
&lt;/function&gt;
&lt;function name="EntityGetNumber"&gt;
	&lt;summary&gt;Returns stored setting for entity. These are set via the Runtime Options.&lt;/summary&gt;
	&lt;param name="key[]" default="" type="a"&gt;Name of Setting.&lt;/param&gt;
	&lt;param name="id" default="_" type="n"&gt;Entity ID Hash.&lt;/param&gt;
&lt;/function&gt;
&lt;function name="EntityGetObject"&gt;
	&lt;summary&gt;Returns "object-id" value for entity, tagged as object. &lt;/summary&gt;
&lt;/function&gt;
&lt;function name="EntityPublicFunction"&gt;
	&lt;summary&gt;Calls a function from another entity.&lt;/summary&gt;
	&lt;param name="id" default="_" type="n"&gt;Entity ID Hash.&lt;/param&gt;
	&lt;param name="function[]" default="" type="a"&gt;Public Function Name.&lt;/param&gt;
	&lt;param name="args[]" default="''''" type="a"&gt;Defines the follow arguments that will be passed to the function.
	 a - Array, last value must be CELLMIN
	 d - Value, passed by reference
	 n - Value, passed by value
	 s - String
	 ''snsn'' means that the follow argument you pass will be a string, a number, a string and a number.
	&lt;/param&gt;
	&lt;param name="..." default="" type="v"&gt;List of Arguments to pass to the function.&lt;/param&gt;
	&lt;return&gt;What the function returns. May return -1 and -2 on error. &lt;/return&gt;
&lt;/function&gt;
&lt;function name="EntityPublicVariable"&gt;
	&lt;summary&gt;Returns a public variable from entity.&lt;/summary&gt;
	&lt;param name="id" default="_" type="n"&gt;Entity ID Hash.&lt;/param&gt;
	&lt;param name="variable[]" default="" type="a"&gt;Name of public variable.&lt;/param&gt;
	&lt;return&gt;the public variable value.&lt;/return&gt;
&lt;/function&gt;
&lt;function name="EntityPublicVariableSet"&gt;
	&lt;summary&gt;Sets a public variable on a entity.&lt;/summary&gt;
	&lt;param name="id" default="_" type="n"&gt;Entity ID Hash.&lt;/param&gt;
	&lt;param name="variable[]" default="" type="a"&gt;Name of public variable.&lt;/param&gt;
	&lt;param name="value" default="" type="n"&gt;new value.&lt;/param&gt;
&lt;/function&gt;
***/
native EntityHash(string{}="", maxlength = sizeof(string));
native EntityCreate(parententity{}, id_string{}, Fixed:x, Fixed:y, Fixed:z, map_id, args[]='''', {Fixed,_}:...);
native EntityDelete(id = SELF);
native EntityGetSetting(key{}, string{}, id = SELF);
native EntityGetSettingHash(key{}, id = SELF);
native EntityGetNumber(key{}, id = SELF );
native object:EntityGetObject(key{} = "object-id", id = SELF ) = EntityGetNumber;
// Args 
/*
 a - Array, last value must be CELLMIN
 d - Value, passed by reference
 n - Value, passed by value
 s - String
*/
native EntityPublicFunction(id, function[], args[]='''', ...);
native EntityPublicVariable(id, variable[]);
native EntityPublicVariableSet(id, variable[], value);

///Entity Collision Functions
/***
&lt;function name="CollisionFromObject"&gt;
	&lt;summary&gt;Set Collision rectangles from the sprite or animation data.&lt;/summary&gt;
	&lt;param name="obj" default="" type="n"&gt;Display Object to use.&lt;/param&gt;
	&lt;param name="type" default="0" type="n"&gt;Collision rectangle type.&lt;/param&gt;
	&lt;param name="id" default="_" type="n"&gt;Entity ID Hash.&lt;/param&gt;
&lt;/function&gt;
&lt;function name="CollisionCheck"&gt;
	&lt;summary&gt;Check to see if Entity is colliding with another entity.&lt;/summary&gt;
	&lt;param name="id1" default="" type="n"&gt;The Hash ID of the first entity you wish to check.&lt;/param&gt;
	&lt;param name="id2" default="" type="n"&gt;The Hash ID of the second entity you wish to check.&lt;/param&gt;
	&lt;param name="rect1" default="-1" type="n"&gt;The collision rectangle of first entity you wish to check.&lt;/param&gt;
	&lt;param name="rect2" default="-1" type="n"&gt;Rhe collision rectangle of second entity you wish to check.&lt;/param&gt;
	&lt;return&gt;True if the collision rectangle of two entities are colliding.&lt;/return&gt;
&lt;/function&gt;
&lt;function name="CollisionSet"&gt;
	&lt;summary&gt;Set a collision for the entity.&lt;/summary&gt;
	&lt;param name="id" default="_" type="n"&gt;Entity ID Hash.&lt;/param&gt;
	&lt;param name="rect" default="0" type="n"&gt;Collision Rectangle.&lt;/param&gt;
	&lt;param name="type" default="0" type="n"&gt;Collision Type.&lt;/param&gt;
	&lt;param name="x" default="0" type="n"&gt;Rectangle points. &lt;/param&gt;
	&lt;param name="y" default="0" type="n"&gt;Rectangle points. &lt;/param&gt;
	&lt;param name="w" default="0" type="n"&gt;Rectangle points. &lt;/param&gt;
	&lt;param name="h" default="0" type="n"&gt;Rectangle points. &lt;/param&gt;
&lt;/function&gt;
&lt;function name="CollisionCalculate"&gt;
	&lt;summary&gt;Generate a list of entities it's colliding with.&lt;/summary&gt;
	&lt;param name="id" default="_" type="n"&gt;Entity ID Hash.&lt;/param&gt;
	&lt;param name="rect" default="-1" type="n"&gt;Collision Rectangle your wish to check. -1 for all.&lt;/param&gt;
	&lt;param name="type" default="-1" type="n"&gt;Not Used.&lt;/param&gt;
	&lt;return&gt;True if a collisions exist.&lt;/return&gt;
	&lt;example&gt;
	if ( CollisionCalculate() )
	{
		new current;
		new angle;
		new dist;
		new rect;
		new _STATE:type;
		while ( CollisionGetCurrent(SELF, current, angle, dist, rect, type) )
		{
			if ( type == TYPE_AWAKING )
			{
				EntityPublicFunction(current, "Awaking", "sn", selfid, rect);
			}
			else if ( type == TYPE_ENEMY || type == TYPE_DOOR )
			{
				EntityPublicFunction(current, "Hit", "snnnnnn", selfid, angle, dist, APLAYER, 0, dx,dy, rect);
			}
			else if ( type == TYPE_TRANSPORT )
			{
				if ( EntityPublicFunction(current, "MovePlayer", "sn", selfid, _dir_) )
				{
					_state_ = STANDING;
				}
			}
			else if ( type == TYPE_PUSHABLE &amp;amp;&amp;amp; _state_ == PUSHING )
			{
				EntityPublicFunction(current, "Push", "snn", selfid, rect, angle);
			}
			else if ( type == TYPE_SWITCH )
			{
				EntityPublicFunction(current, "Pressed", "s", selfid);
			}
			else if ( type == TYPE_ITEM )
			{
				if ( EntityPublicFunction(current, "Pickup", "s", selfid) )
				{
					_state_ = LIFTING;
				}
			}
		}
	}
	&lt;/example&gt;
&lt;/function&gt;
&lt;function name="CollisionGetCurrent"&gt;
	&lt;summary&gt;Retrieves current collision from generated list.&lt;/summary&gt;
	&lt;param name="id" default="_" type="n"&gt;Entity ID Hash.&lt;/param&gt;
	&lt;param name="&amp;amp;current" default="" type="n"&gt;String to store colliding entity ID.&lt;/param&gt;
	&lt;param name="&amp;amp;angle" default="" type="n"&gt;Variable to store angle.&lt;/param&gt;
	&lt;param name="&amp;amp;dist" default="" type="n"&gt;Variable to store distance. &lt;/param&gt;
	&lt;param name="&amp;amp;rect" default="" type="n"&gt;Variable to store rectangle that being colliding with.&lt;/param&gt;
	&lt;param name="&amp;amp;type" default="" type="n"&gt;Variable to store type of rectangle that your colliding with.&lt;/param&gt;
	&lt;return&gt;True if a collision exist.&lt;/return&gt;
	&lt;example&gt;
	if ( CollisionCalculate() )
	{
		new current;
		new angle;
		new dist;
		new rect;
		new _STATE:type;
		while ( CollisionGetCurrent(SELF, current, angle, dist, rect, type) )
		{
			if ( type == TYPE_AWAKING )
			{
				EntityPublicFunction(current, "Awaking", "sn", selfid, rect);
			}
			else if ( type == TYPE_ENEMY || type == TYPE_DOOR )
			{
				EntityPublicFunction(current, "Hit", "snnnnnn", selfid, angle, dist, APLAYER, 0, dx,dy, rect);
			}
			else if ( type == TYPE_TRANSPORT )
			{
				if ( EntityPublicFunction(current, "MovePlayer", "sn", selfid, _dir_) )
				{
					_state_ = STANDING;
				}
			}
			else if ( type == TYPE_PUSHABLE &amp;amp;&amp;amp; _state_ == PUSHING )
			{
				EntityPublicFunction(current, "Push", "snn", selfid, rect, angle);
			}
			else if ( type == TYPE_SWITCH )
			{
				EntityPublicFunction(current, "Pressed", "s", selfid);
			}
			else if ( type == TYPE_ITEM )
			{
				if ( EntityPublicFunction(current, "Pickup", "s", selfid) )
				{
					_state_ = LIFTING;
				}
			}
		}
	}
	&lt;/example&gt;
&lt;/function&gt;
&lt;function name="CollisionGet"&gt;
	&lt;summary&gt;Retrieves the entity collision rectangle values.&lt;/summary&gt;
	&lt;param name="id" default="_" type="n"&gt;Entity ID Hash.&lt;/param&gt;
	&lt;param name="rect" default="" type="n"&gt;Collision Rectangle.&lt;/param&gt;
	&lt;param name="&amp;amp;x" default="" type="n"&gt;Rectangle points.&lt;/param&gt;
	&lt;param name="&amp;amp;y" default="" type="n"&gt;Rectangle points.&lt;/param&gt;
	&lt;param name="&amp;amp;w" default="" type="n"&gt;Rectangle points.&lt;/param&gt;
	&lt;param name="&amp;amp;h" default="" type="n"&gt;Rectangle points.&lt;/param&gt;
&lt;/function&gt;
***/
native CollisionFromObject(obj, type = 0, id = SELF);
native CollisionCheck(id1, id2, rect1 = -1, rect2 = -1);
native CollisionSet(id = SELF, rect = 0, type = 0, x = 0, y = 0, w = 0, h = 0);
native CollisionGet(id = SELF, rect, &amp;x, &amp;y, &amp;w, &amp;h);
native CollisionCalculate(id = SELF, rect = -1, type = -1);
native CollisionGetCurrent(id = SELF, &amp;current, &amp;angle, &amp;dist, &amp;rect, &amp;type );

//Map Collision Functions
/***

***/
native MapCollisionList();
native MapCollisionCurrent(objecta[], objectb[], &amp;angle, &amp;dist, &amp;rect, length_a = sizeof objecta, length_b = sizeof objectb);

///Entity Management Functions
/***
&lt;function name="EntitiesList"&gt;
	&lt;summary&gt;Generate a list of entities for required map.&lt;/summary&gt;
	&lt;param name="map" default="CURRENT_MAP" type="n"&gt;map id you wish to check.&lt;/param&gt;
	&lt;return&gt;Amount of entities on the list.&lt;/return&gt;
&lt;/function&gt;
&lt;function name="EntitiesNext"&gt;
	&lt;summary&gt;Retrieves current entity name from generated list.&lt;/summary&gt;
	&lt;param name="&amp;amp;id" default="" type="a"&gt;String to store the Entity ID.&lt;/param&gt;
	&lt;param name="map_id" default="CURRENT_MAP" type="n"&gt;map id you wish to check.&lt;/param&gt;
	&lt;param name="string[]" default="&amp;quot;&amp;quot;" type="a"&gt;String to store the Entity Name.&lt;/param&gt;
	&lt;return&gt;True if there still more entities. False if no more is in the list.&lt;/return&gt;
&lt;/function&gt;
***/
native EntitiesList(mapid = 0);
native EntitiesNext(&amp;id, map_id = 0, string{}="", maxlength = sizeof(string));


#define __MAP_ENTITY__ EntityHash("__map__");
#define __MAIN_ENTITY__ EntityHash("main");

</pre>
</div>

