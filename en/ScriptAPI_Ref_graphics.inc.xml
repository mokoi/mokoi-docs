<?xml-stylesheet href="../common.css"?>
<div xmlns="http://www.w3.org/1999/xhtml">
	<pre>#if defined _graphics_included
  #endinput
#endif
#define _graphics_included

//title Graphics Functions
//description Colour arguments are a RGBA hex value such as 0xFF33BBAA, FF is red value, 33 is green, BB is blue and AA would be the alpha.

#include &lt;fixed&gt;
#include &lt;enums&gt;
#include &lt;core&gt;

const GraphicTypes: {
	SPRITE = 's',
	RECTANGLE = 'r',
	LINE = 'l',
	TEXT = 't',
	POLYGON = 'p',
	CIRCLE = 'c',
	CANVAS = 'M',
}

const _DISPLAYSTYLES:{
	STYLE_NORMAL = 0,
	STYLE_VGRADIENT,
	STYLE_HGRADIENT,
	STYLE_GLOW,
	STYLE_OUTLINE,
	STYLE_REPLACECOLOUR,
	STYLE_NEGATIVE
}

const _OBJECTFLAG: {
	FLAG_SPEED = 0,
	FLAG_ANIMLOOP = 1,
	FLAG_ANIMREVERSE = 2,
	FLAG_ANIMRESET = 3
}

///Misc Graphic Functions
native GraphicsType();
native GraphicsDraw(string[], GraphicTypes:type, x, y, z, w, h, c = WHITE, string_size = sizeof string );
native SheetReference(sheet[], ref = 1);
native SheetReplace(olds[], news[]);
/***
&lt;function name="GraphicsType"&gt;
	&lt;summary&gt;Returns the type of graphic display. Can be used to enable some effects.&lt;/summary&gt;
	&lt;return&gt;Current Display Type&lt;/return&gt;
&lt;/function&gt;
&lt;function name="GraphicsDraw"&gt;
	&lt;summary&gt;Draw a Display Objects for the current frame.&lt;/summary&gt;
	&lt;param name="string[]" default="" type="a"&gt;Name of Sprite, Animation, Polygon or Text String, depending on what type of object your drawing.&lt;/param&gt;
	&lt;param name="GraphicTypes:type" default="" type="n"&gt;Type of Object&lt;/param&gt;
	&lt;param name="x" default="" type="n"&gt;Position&lt;/param&gt;
	&lt;param name="y" default="" type="n"&gt;Position&lt;/param&gt;
	&lt;param name="z" default="" type="n"&gt;Position&lt;/param&gt;
	&lt;param name="w" default="" type="n"&gt;Dimension (or second x,y location for line).&lt;/param&gt;
	&lt;param name="h" default="" type="n"&gt;Dimension (or second x,y location for line).&lt;/param&gt;
	&lt;param name="c" default="0xFFFFFFFF" type="n"&gt;Colour&lt;/param&gt;
&lt;/function&gt;
&lt;function name="SheetReference"&gt;
	&lt;summary&gt;Add or remove a reference for sprite sheet. Mainly used to keep a sprite sheet in memory.&lt;/summary&gt;
	&lt;param name="sheet[]" default="" type="a"&gt;&lt;/param&gt;
	&lt;param name="ref" default="1" type="n"&gt;&lt;/param&gt;
&lt;/function&gt;
&lt;function name="SheetReplace"&gt;
	&lt;summary&gt;Changing one sheet to another.&lt;/summary&gt;
	&lt;param name="olds[]" default="" type="a"&gt;&lt;/param&gt;
	&lt;param name="news[]" default="1" type="n"&gt;&lt;/param&gt;
&lt;/function&gt;
***/

///Animation Functions
native AnimationGetLength(sheet[], anim[]); /* Returns milliseconds */
native Fixed:AnimationGetLength2(sheet[], anim[]) = AnimationGetLength;
#pragma deprecated Future Feature
native AnimationCreate(string[], length);
#pragma deprecated Future Feature
native AnimationAddFrame(string[], sprite[], string_size = sizeof string, sprite_size = sizeof sprite);
/***
&lt;function name="AnimationGetLength"&gt;
	&lt;summary&gt;Returns length of animation in milliseconds.&lt;/summary&gt;
	&lt;param name="sheet[]" default="" type="a"&gt;&lt;/param&gt;
	&lt;param name="anim[]" default="" type="a"&gt;&lt;/param&gt;
	&lt;return&gt;length of animation in milliseconds.&lt;/return&gt;
&lt;/function&gt;
&lt;function name="AnimationGetLength2"&gt;
	&lt;summary&gt;Returns length of animation in seconds.&lt;/summary&gt;
	&lt;param name="sheet[]" default="" type="a"&gt;&lt;/param&gt;
	&lt;param name="anim[]" default="" type="a"&gt;&lt;/param&gt;
	&lt;return&gt;Returns length of animation in seconds.&lt;/return&gt;
&lt;/function&gt;
&lt;futurefunction name="AnimationCreate"&gt;
	&lt;summary&gt;Creates new animation.&lt;/summary&gt;
	&lt;param name="string[]" default="" type="a"&gt;&lt;/param&gt;
	&lt;param name="length" default="" type="n"&gt;&lt;/param&gt;
	&lt;return&gt;0 for error.&lt;/return&gt;
&lt;/futurefunction&gt;
&lt;futurefunction name="AnimationAddFrame"&gt;
	&lt;summary&gt;Adds a frame to an animation.&lt;/summary&gt;
	&lt;param name="string[]" default="" type="a"&gt;&lt;/param&gt;
	&lt;param name="sprite[]" default="" type="a"&gt;&lt;/param&gt;
	&lt;return&gt;1 for successful, 0 for error.&lt;/return&gt;
&lt;/futurefunction&gt;
***/

///Text Functions
native TextSprites(able, sheet[]);
/***
&lt;function name="TextSprites"&gt;
	&lt;summary&gt;Ables the use of Sprites for text instead of the internal bitmap font.&lt;/summary&gt;
	&lt;param name="able" default="" type="n"&gt;&lt;/param&gt;
	&lt;param name="sheet[]" default="" type="a"&gt;&lt;/param&gt;
&lt;/function&gt;
***/

///Polygon Functions
#pragma deprecated Future Feature
native PolygonCreate(string[]);
#pragma deprecated Future Feature
native PolygonAddPoint(string[], x, y, string_size = sizeof string);
/***
&lt;futurefunction name="PolygonCreate"&gt;
	&lt;summary&gt;Create a polygon.&lt;/summary&gt;
	&lt;param name="string[]" default="" type="a"&gt;name of polygon.&lt;/param&gt;
	&lt;return&gt;0 for error.&lt;/return&gt;
&lt;/futurefunction&gt;
&lt;futurefunction name="PolygonAddPoint"&gt;
	&lt;summary&gt;Add a point to existing polygon.&lt;/summary&gt;
	&lt;param name="string[]" default="" type="a"&gt;name of polygon.&lt;/param&gt;
	&lt;param name="x" default="" type="n"&gt;new point position.&lt;/param&gt;
	&lt;param name="y" default="" type="n"&gt;new point position.&lt;/param&gt;
	&lt;return&gt;1 for successful, 0 for error.&lt;/return&gt;
&lt;/futurefunction&gt;
***/

///Display Objects Functions
native object:ObjectCreate(string{}, GraphicTypes:type, x = 0, y = 0, z = 0, w = 0, h = 0, c = 0xFFFFFFFF, pos = POSITION_MAP, string_size = sizeof string);
native ObjectPosition(object:id, x, y, z, w, h, pos = POSITION_MAP);
native ObjectEffect(object:id, colour = WHITE, rotate = 0, scale_w = 1000, scale_h = 1000, mirror = 0, _DISPLAYSTYLES:style = STYLE_NORMAL, colour2 = WHITE);
native ObjectReplace(object:id, string[], GraphicTypes:type);
native ObjectToggle(object:id, show);
native ObjectFlag(object:id, key, value);
native ObjectDelete(object:id);
native ObjectInfo(object:id, &amp;w, &amp;h);
/***
&lt;function name="ObjectCreate"&gt;
	&lt;summary&gt; Creates a new Display Objects. 'string' can be a sprite name or some text.&lt;/summary&gt;
	&lt;param name="string[]" default="" type="a"&gt;Sprite/animation name or text.&lt;/param&gt;
	&lt;param name="GraphicTypes:type" default="" type="n"&gt;Type of Object.&lt;/param&gt;
	&lt;param name="x" default="0" type="n"&gt;Map position of the object.&lt;/param&gt;
	&lt;param name="y" default="0" type="n"&gt;Map position of the object.&lt;/param&gt;
	&lt;param name="z" default="0" type="n"&gt;Map position of the object.&lt;/param&gt;
	&lt;param name="w" default="0" type="n"&gt;Width of the object. Sprites and Animations repeat until they fit into the Width , also Width can be zero.&lt;/param&gt;
	&lt;param name="h" default="0" type="n"&gt;Height of the object. Sprites and Animations repeat until they fit into the  Height, also Height can be zero.&lt;/param&gt;
	&lt;param name="c" default="0xFFFFFFFF" type="n"&gt;a RGBA hex value such as 0xFF33BBAA, FF is red value, 33 is green, BB is blue and AA would be the alpha.&lt;/param&gt;
	&lt;param name="pos" default="POSITION_MAP" type="n"&gt;&lt;/param&gt;
	&lt;return&gt;New object ID&lt;/return&gt;
	&lt;example&gt;
	new helded = 0xFF00FFFF; 
	 
	new player = 0; 
	new obj1 = -1; 
	new obj2 = -1; 
	new obj3 = -1; 
	new x = 10, y = 10; 

	public Init(...) 
	{ 
		new Fixed:fx, Fixed:fy, Fixed:fz;
		EntityGetPosition(fx, fy,fz);
		x = fround(fx)+32;
		y = fround(fy)+32;
	 
		player =  EntityGetNumber("player");
		obj1 = ObjectCreate("", RECTANGLE, 11, 10, 5, 16, 64, 0xFF0000FF);
		obj2 = ObjectCreate("", RECTANGLE, 100, 100, 5, 64, 16, 0xFF0000FF);
		obj3 = ObjectCreate("", RECTANGLE, 100, 10, 5, 64, 16, 0xFF0000FF);

	} 
	 
	public Close() 
	{ 
		ObjectDelete(obj1); 
		ObjectDelete(obj2); 
		ObjectDelete(obj3); 
	} 

	main() 
	{ 
		new xaxis = 255; 
		new yaxis = -255; 
		new zaxis = 128; 

		xaxis = InputAxis(0, player)/8;
		yaxis = InputAxis(1, player)/8;
		zaxis = InputAxis(2, player)/8;

		if ( xaxis &amp;gt; 0 )
			ObjectPosition(obj1, x, y-5, 3, xaxis, 10); 
		else if ( xaxis &amp;lt; 0 )
			ObjectPosition(obj1, x+xaxis, y-5, 3, 0-xaxis, 10); 
		else
			ObjectPosition(obj1, x-1, y-5, 3, 1, 10); 

		if ( yaxis &amp;gt; 0 )
			ObjectPosition(obj2, x-5, y, 3, 10, yaxis); 
		else if ( yaxis &amp;lt; 0 )
			ObjectPosition(obj2, x-5, y+yaxis, 3, 10, 0-yaxis); 
		else 
			ObjectPosition(obj2, x-5, y-1, 3, 10, 1);
		if ( zaxis &amp;gt; 0 )
			ObjectPosition(obj3, x+44, y, 3, 10, zaxis); 
		else if ( zaxis &amp;lt; 0 )
			ObjectPosition(obj3, x+44, y+zaxis, 3, 10, 0-zaxis); 
		else 
			ObjectPosition(obj3, x+44, y-1, 3, 10, 1); 
	} 
	&lt;/example&gt;
&lt;/function&gt;
&lt;function name="ObjectPosition"&gt;
	&lt;summary&gt;Give the Display Objects a new position and dimension.&lt;/summary&gt;
	&lt;param name="object:id" default="" type="n"&gt;Object's ID.&lt;/param&gt;
	&lt;param name="x" default="" type="n"&gt;Map position of the object.&lt;/param&gt;
	&lt;param name="y" default="" type="n"&gt;Map position of the object.&lt;/param&gt;
	&lt;param name="z" default="" type="n"&gt;Map position of the object.&lt;/param&gt;
	&lt;param name="w" default="0" type="n"&gt;Width of the object. Sprites and Animations repeat until they fit into the Width , also Width can be zero.&lt;/param&gt;
	&lt;param name="h" default="0" type="n"&gt;Height of the object. Sprites and Animations repeat until they fit into the  Height, also Height can be zero.&lt;/param&gt;
	&lt;param name="pos" default="POSITION_MAP" type="n"&gt;&lt;/param&gt;
&lt;/function&gt;
&lt;function name="ObjectEffect"&gt;
	&lt;summary&gt;Change Display Objects effects.&lt;/summary&gt;
	&lt;param name="object:id" default="" type="n"&gt;Object's ID.&lt;/param&gt;
	&lt;param name="colour" default="0xFFFFFFFF" type="n"&gt;Primary colour of the object.&lt;/param&gt;
	&lt;param name="rotate" default="0" type="n"&gt;&lt;/param&gt;
	&lt;param name="scale_w" default="1000" type="n"&gt;&lt;/param&gt;
	&lt;param name="scale_h" default="1000" type="n"&gt;&lt;/param&gt;
	&lt;param name="mirror" default="0" type="n"&gt;&lt;/param&gt;
	&lt;param name="style" default="STYLE_NORMAL" type="n"&gt;&lt;/param&gt;
	&lt;param name="colour2" default="0xFFFFFFFF" type="n"&gt;Secondary colour of the object.&lt;/param&gt;
&lt;/function&gt;
&lt;function name="ObjectReplace"&gt;
	&lt;summary&gt;Convert Display Objects to new type.&lt;/summary&gt;
	&lt;param name="object:id" default="" type="n"&gt;Object's ID.&lt;/param&gt;
	&lt;param name="string[]" default="" type="a"&gt;Sprite/animation name or text.&lt;/param&gt;
	&lt;param name="GraphicTypes:type" default="" type="n"&gt;Type of Object.&lt;/param&gt;
&lt;/function&gt;
&lt;function name="ObjectToggle"&gt;
	&lt;summary&gt;Toggle the visibility of a Display Object.&lt;/summary&gt;
	&lt;param name="object:id" default="" type="n"&gt;Object's ID.&lt;/param&gt;
	&lt;param name="show" default="" type="n"&gt;&lt;/param&gt;
&lt;/function&gt;
&lt;function name="ObjectFlag"&gt;
	&lt;summary&gt;Sets Display Object flags.&lt;/summary&gt;
	&lt;param name="object:id" default="" type="n"&gt;Object's ID.&lt;/param&gt;
	&lt;param name="key" default="" type="n"&gt;&lt;/param&gt;
	&lt;param name="value" default="" type="n"&gt;&lt;/param&gt;
&lt;/function&gt;
&lt;function name="ObjectDelete"&gt;
	&lt;summary&gt;Delete a Display Objects.&lt;/summary&gt;
	&lt;param name="object:id" default="" type="n"&gt;Object's ID.&lt;/param&gt;
&lt;/function&gt;
&lt;function name="ObjectInfo"&gt;
	&lt;summary&gt;Returns width and height of object.&lt;/summary&gt;
	&lt;param name="object:id" default="" type="n"&gt;Object's ID.&lt;/param&gt;
	&lt;param name="&amp;amp;w" default="" type="n"&gt;Variable to store the width. &lt;/param&gt;
	&lt;param name="&amp;amp;h" default="" type="n"&gt;Variable to store the height. &lt;/param&gt;
&lt;/function&gt;
***/

///Paths Functions
native PathPoints( object:id, point, &amp;x, &amp;y, &amp;t);
native ObjectFollowPath(object:id, Fixed:speed, &amp;x, &amp;y, bool:loop);
/***
&lt;function name="ObjectFollowPath"&gt;
	&lt;summary&gt;Makes object follow path.&lt;/summary&gt;
	&lt;param name="object:id" default="" type="n"&gt;Object's ID.&lt;/param&gt;
	&lt;param name="Fixed:speed" default="" type="n"&gt;movement speed.&lt;/param&gt;
	&lt;param name="&amp;amp;x" default="" type="n"&gt;Variable to store the dimension.&lt;/param&gt;
	&lt;param name="&amp;amp;y" default="" type="n"&gt;Variable to store the dimension.&lt;/param&gt;
	&lt;param name="bool:loop" default="" type="n"&gt;loop movement.&lt;/param&gt;
&lt;/function&gt;
&lt;function name="PathPoints"&gt;
	&lt;summary&gt;Returns Object Path point values.&lt;/summary&gt;
	&lt;param name="object:id" default="" type="n"&gt;Object's ID.&lt;/param&gt;
	&lt;param name="point" default="" type="n"&gt;requested point in path.&lt;/param&gt;
	&lt;param name="&amp;amp;x" default="" type="n"&gt;Variable to store the dimension.&lt;/param&gt;
	&lt;param name="&amp;amp;y" default="" type="n"&gt;Variable to store the dimension.&lt;/param&gt;
	&lt;param name="&amp;amp;t" default="" type="n"&gt;Variable to store the time.&lt;/param&gt;
&lt;/function&gt;
***/

///Camera Functions
native CameraSetScroll(bool:scroll);
native LayerSetRotation(layer, roll, pitch, yaw);
native LayerSetOffset(layer, Fixed:x, Fixed:y);
native LayerColour(layer, colour = 0xFFFFFFFF );
/***
&lt;function name="CameraSetScroll"&gt;
	&lt;summary&gt;Enable Smooth scrolling.&lt;/summary&gt;
	&lt;param name="bool:scroll" default="" type="n"&gt;Set to true to enable Smooth scrolling.&lt;/param&gt;
	&lt;notes&gt;
		&lt;p&gt;Smooth Scrolling keeps the map offset in the center of the screen and also keeps the screen on the map.&lt;/p&gt;
		&lt;img src="images/CameraScroll.png"/&gt;
		&lt;p&gt;
			Black Rectangle: Screen Area.&lt;br/&gt;
			Red Line: Map offset if smooth scrolling is disable.&lt;br/&gt;
			Yellow Line: Map offset if smooth scrolling is enable.
		&lt;/p&gt;
	&lt;/notes&gt;

	&lt;similar&gt;
		&lt;link name="MapSetOffset"/&gt;
	&lt;/similar&gt;
&lt;/function&gt;
&lt;function name="LayerSetRotation"&gt;
	&lt;summary&gt;Change the rotation of the layer. This feature is still in development and will only be available for OpenGL display system.&lt;/summary&gt;
	&lt;param name="layer" default="" type="n"&gt;Layer to change. Default setting give layers 0-6.&lt;/param&gt;
	&lt;param name="roll" default="" type="n"&gt;&lt;/param&gt;
	&lt;param name="pitch" default="" type="n"&gt;&lt;/param&gt;
	&lt;param name="yaw" default="" type="n"&gt;&lt;/param&gt;
&lt;/function&gt;
&lt;function name="LayerSetOffset"&gt;
	&lt;summary&gt;Change the Offset of the layer.&lt;/summary&gt;
	&lt;param name="layer" default="" type="n"&gt;Layer to change. Default setting give layers 0-6.&lt;/param&gt;
	&lt;param name="Fixed:x" default="" type="n"&gt;&lt;/param&gt;
	&lt;param name="Fixed:y" default="" type="n"&gt;&lt;/param&gt;
	&lt;example&gt;
	new Fixed:worldx = 0.00;
	new Fixed:worldy = 0.00;
	new Fixed:layer1 = 0.00;
	new Fixed:layer2 = 0.00;

	main()
	{
		new Fixed:q = GameFrame2() * 10.00;
		worldx += q
		layer1 += q;
		layer2 += (q*2);

		LayerSetOffset(-1, 0.00, worldy); // Sets All layers offsets to 0.00, worldy
		LayerSetOffset(1, layer2, worldy); // Change Layer 1 offset
		LayerSetOffset(2, layer1, worldy); // Change Layer 1 offset
		MapSetOffset(worldx, worldy);
	}
	&lt;/example&gt;
&lt;/function&gt;
&lt;function name="LayerColour"&gt;
	&lt;summary&gt;Change the base color of the layer.&lt;/summary&gt;
	&lt;param name="layer" default="" type="n"&gt;Layer to change. Default setting give layers 0-6.&lt;/param&gt;
	&lt;param name="colour" default="0xFFFFFFFF " type="n"&gt;&lt;/param&gt;
	&lt;notes&gt;&lt;img src="images/LayerColour.png"/&gt;&lt;/notes&gt;
	&lt;example&gt;
	new DayNight[24] = {
		0x4E5CAFFF,\
		0x5964A9FF,\
		0x606BAEFF,\
		0x6A76BAFF,\
		0x6E76BAFF,\
		0x7883C6FF,\
		0x98A3E8FF,\
		0xB6BEEEFF,\
		0xD6DAF3FF,\
		0xF4F5FBFF,\
		0xFFFFFFFF,\
		0xFFFFFFFF,\
		0xF7F8ECFF,\
		0xF7F8E7FF,\
		0xEFF2E1FF,\
		0xEDEDD2FF,\
		0xE8ECC8FF,\
		0xE8E1BEFF,\
		0xE4C47EFF,\
		0xE5A67EFF,\
		0xE59E96FF,\
		0x7D7CC8FF,\
		0x766FD8FF,\
		0x645CBEFF\
	};
	new hour = 6;
	new seconds = 0;
	main()
	{
		seconds += GameFrame();
		hour = seconds / 1000;

		LayerColour(0, DayNight[hour]);
		LayerColour(1, DayNight[hour]);
		LayerColour(2, DayNight[hour]);
		LayerColour(3, DayNight[hour]);
		LayerColour(4, DayNight[hour]);
		LayerColour(5, DayNight[hour]);

	}
	&lt;/example&gt;
&lt;/function&gt;
***/


///Display Object Helper Functions
stock ResetObjects( ... )
{
	new c = numargs();
	if ( c &gt;0 )
	{
		for ( new i = 0; i &lt; c; i++) 
			ObjectEffect(object:getarg(c), WHITE);
	}
}

stock HideObjects( ... )
{
	new c = numargs();
	if ( c &gt; 0 )
	{
		for ( new i = 0; i &lt; c; i++) 
			ObjectToggle(object:getarg(c), 0);
	}
}

stock ShowObjects( ... )
{
	new c = numargs();
	if ( c &gt;0 )
	{
		for ( new i = 0; i &lt; c; i++) 
			ObjectToggle(object:getarg(c), 1);
	}
}
/***
&lt;function name="ResetObjects"&gt;
	&lt;summary&gt;Reset effects on all objects passed.&lt;/summary&gt;
	&lt;param name="..." default="" type="v"&gt;&lt;/param&gt;
&lt;/function&gt;
&lt;function name="HideObjects"&gt;
	&lt;summary&gt;Hides all objects passed.&lt;/summary&gt;
	&lt;param name="..." default="" type="v"&gt;&lt;/param&gt;
&lt;/function&gt;
&lt;function name="ShowObjects"&gt;
	&lt;summary&gt;Shows all objects passed.&lt;/summary&gt;
	&lt;param name="..." default="" type="v"&gt;&lt;/param&gt;
&lt;/function&gt;
***/</pre>
</div>

