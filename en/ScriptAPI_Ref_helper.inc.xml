<?xml-stylesheet href="../common.css"?>
<div xmlns="http://www.w3.org/1999/xhtml">
	<pre>#if defined _helper_included
  #endinput
#endif
#define _helper_included

#include &lt;core&gt;
#include &lt;mokoi&gt;

//title Helper Functions
//description These are define in the helper.inc header, so to use these functions, #include &amp;lt;helper&amp;gt; must be include at the top of the script.


///Timer Functions
/***
&lt;function name="TimerCountdown"&gt;
	&lt;summary&gt;Returns true when time value is 0.&lt;/summary&gt;
	&lt;param name="&amp;amp;time" default="" type="n"&gt;Time counter varable&lt;/param&gt;
	&lt;return&gt;True when time reaches 0.&lt;/return&gt;
&lt;/function&gt;
&lt;function name="TimerCountdownWithReset"&gt;
	&lt;summary&gt;Returns true when time value is 0, then resets time.&lt;/summary&gt;
	&lt;param name="&amp;amp;time" default="" type="n"&gt;Time counter varable&lt;/param&gt;
	&lt;param name="reset" default="" type="n"&gt;reset value.&lt;/param&gt;
	&lt;return&gt;True when time reaches 0.&lt;/return&gt;
&lt;/function&gt;
&lt;function name="TimerGetRandomValue"&gt;
	&lt;summary&gt;Generates a Random number after a set time.&lt;/summary&gt;
	&lt;param name="randomness" default="" type="n"&gt;max random value.&lt;/param&gt;
	&lt;param name="&amp;amp;random_value" default="" type="n"&gt;Varable to store the random number.&lt;/param&gt;
	&lt;param name="&amp;amp;time" default="" type="n"&gt;Time counter varable&lt;/param&gt;
	&lt;param name="timer_reset" default="1000" type="n"&gt;reset value.&lt;/param&gt;
	&lt;return&gt;True if random_value is updated.&lt;/return&gt;
&lt;/function&gt;
***/
stock TimerCountdown(&amp;time)
{
	time -= GameFrame();
	return (time &gt; 0 ? false : true);
}

stock TimerCountdownWithReset(&amp;time, reset)
{
	time -= GameFrame();
	if ( time &gt; 0 )
		return false;
	else
	{
		time = reset;
		return true;
	}
}

stock TimerGetRandomValue(randomness, &amp;random_value, &amp;time, timer_reset = 1000 )
{
	if ( CountTimer(time, timer_reset) )
	{
		value = NumberRandom(randomness);
		return true;
	}
	return false;
}


///Sound Helper Functions
stock SoundPlayOnce(&amp;value, file[])
{
	if ( !value )
	{
		AudioPlaySound(file, 0, 0);
		value = true;
	}
}

stock SoundPlayRepeat(&amp;value, file[])
{
	if ( value &lt; 0)
		value = AudioPlaySound(file, 0, 0);
	else
		value -= GameFrame();
}




/***
&lt;function name="SoundPlayOnce"&gt;
	&lt;summary&gt;Play a audio file once.&lt;/summary&gt;
	&lt;param name="&amp;amp;value" default="" type="n"&gt;Variable to store if audio has been played.&lt;/param&gt;
	&lt;param name="file[]" default="" type="a"&gt;Audio File.&lt;/param&gt;
&lt;/function&gt;
&lt;function name="SoundPlayRepeat"&gt;
	&lt;summary&gt;Trys to repeat playing audio file.&lt;/summary&gt;
	&lt;param name="&amp;amp;value" default="" type="n"&gt;Variable to store if audio has been played.&lt;/param&gt;
	&lt;param name="file[]" default="" type="a"&gt;Audio File.&lt;/param&gt;
&lt;/function&gt;
***/



///Bits Functions
stock SetBit( &amp;v, n )
{
	v |= (1 &lt;&lt; n);
}

stock ClearBit( &amp;v, n )
{
	v &amp;= ~(1 &lt;&lt; n);
}

stock ToggleBit( &amp;v, n )
{
	v ^= (1 &lt;&lt; n);
}

stock bool:TestBit( v, n )
{
	return !!(v &amp; (1 &lt;&lt; n));
}

stock SetBits( &amp;v, n, p, s )
{
	n = clamp( n, 0, (1&lt;&lt;s)-1);
	v |= (n &lt;&lt; p);
}

stock GetBits( v, p, s )
{
	return (v &gt;&gt; p) &amp; ((1&lt;&lt;s)-1);
}


/***
&lt;function name="SetBit"&gt;
	&lt;summary&gt;Changes a bit value&lt;/summary&gt;
	&lt;param name="&amp;amp;v" default="" type="n"&gt;Variable to use.&lt;/param&gt;
	&lt;param name="position" default="" type="n"&gt;Bit Position to change.&lt;/param&gt;
&lt;/function&gt;
&lt;function name="ClearBit"&gt;
	&lt;summary&gt;Clears a bit value&lt;/summary&gt;
	&lt;param name="&amp;amp;v" default="" type="n"&gt;Variable to use.&lt;/param&gt;
	&lt;param name="position" default="" type="n"&gt;Bit Position to change.&lt;/param&gt;
&lt;/function&gt;
&lt;function name="ToggleBit"&gt;
	&lt;summary&gt;Toggles a  bit value&lt;/summary&gt;
	&lt;param name="&amp;amp;v" default="" type="n"&gt;Variable to use.&lt;/param&gt;
	&lt;param name="position" default="" type="n"&gt;Bit Position to change.&lt;/param&gt;
&lt;/function&gt;
&lt;function name="TestBit"&gt;
	&lt;summary&gt;Return the bit value&lt;/summary&gt;
	&lt;param name="&amp;amp;v" default="" type="n"&gt;Variable to use.&lt;/param&gt;
	&lt;param name="position" default="" type="n"&gt;Bit Position to change.&lt;/param&gt;
	&lt;return type="bool"&gt;bit value&lt;/return&gt;
&lt;/function&gt;
&lt;function name="SetBits"&gt;
	&lt;summary&gt;Sets a range of bits.&lt;/summary&gt;
	&lt;param name="&amp;amp;v" default="" type="n"&gt;Variable to use.&lt;/param&gt;
	&lt;param name="value" default="" type="n"&gt;Value.&lt;/param&gt;
	&lt;param name="position" default="" type="n"&gt;Bit position.&lt;/param&gt;
	&lt;param name="size" default="" type="n"&gt;Number of bits to use.&lt;/param&gt;
&lt;/function&gt;
&lt;function name="GetBits"&gt;
	&lt;summary&gt;Sets a range of bits.&lt;/summary&gt;
	&lt;param name="value" default="" type="n"&gt;Variable to use.&lt;/param&gt;
	&lt;param name="position" default="" type="n"&gt;Bit position.&lt;/param&gt;
	&lt;param name="size" default="" type="n"&gt;Number of bits to use.&lt;/param&gt;
	&lt;return&gt;value of bits&lt;/return&gt;
&lt;/function&gt;

***/
</pre>
</div>

