<?xml-stylesheet href="../common.css"?>
<div xmlns="http://www.w3.org/1999/xhtml">
	<pre>/* Fixed point arithmetic
 *
 * (c) Copyright 1998-2007, ITB CompuPhase
 * This file is provided as is (no warranties).
 */
#if defined fixed_included
  #endinput
#endif
#define fixed_included


//title Rational Number Support
//description Fixed point numbers are the supported rational number system and allows for 3 decimal places. Floating point numbers are also support.

#include &lt;real&gt;

#pragma rational Fixed(3)

native Fixed:fixed(value);
native Fixed:strfixed(const string[]);
native Fixed:fmul(Fixed:oper1, Fixed:oper2);
native Fixed:fdiv(Fixed:dividend, Fixed:divisor);
native Fixed:ffract(Fixed:value);
native fround(Fixed:value, round_method:method=round_normal);
native Fixed:fpower(Fixed:value, exponent);
native Fixed:fsqroot(Fixed:value);
native Fixed:fabs(Fixed:value);

native Fixed:flog(Fixed:value, Fixed:base=10.0); /* Return the logarithm */

/**************************************************/
/* Return the sine, cosine or tangent. The input angle may be in radian, degrees or grades. */
native Fixed:fsin(Fixed:value, anglemode:mode=radian);
native Fixed:fcos(Fixed:value, anglemode:mode=radian);
native Fixed:ftan(Fixed:value, anglemode:mode=radian);
native Fixed:fatan2(Fixed:x, Fixed:y, anglemode:mode=radian );

/**************************************************/
/* user defined operators */
native Fixed:operator*(Fixed:oper1, Fixed:oper2) = fmul;
native Fixed:operator/(Fixed:oper1, Fixed:oper2) = fdiv;
native Fixed:operator=(oper) = fixed;

stock Fixed:operator++(Fixed:oper)
    return oper + fixed(1);

stock Fixed:operator--(Fixed:oper)
    return oper - fixed(1);

stock Fixed:operator*(Fixed:oper1, oper2)
    return Fixed: (_:oper1 * oper2);            /* "*" is commutative */

stock Fixed:operator/(Fixed:oper1, oper2)
    return oper1 / fixed(oper2);

stock Fixed:operator/(oper1, Fixed:oper2)
    return fdiv(fixed(oper1), oper2);

stock Fixed:operator+(Fixed:oper1, oper2)
    return oper1 + fixed(oper2);                /* "+" is commutative */

stock Fixed:operator-(Fixed:oper1, oper2)
    return oper1 - fixed(oper2);

stock Fixed:operator-(oper1, Fixed:oper2)
    return fixed(oper1) - oper2;

stock bool:operator&gt;(Fixed:oper1, oper2)
    return oper1 &gt; fixed(oper2);

stock bool:operator&gt;(oper1, Fixed:oper2)
    return fixed(oper1) &gt; oper2;

stock bool:operator&gt;=(Fixed:oper1, oper2)
    return oper1 &gt;= fixed(oper2);

stock bool:operator&gt;=(oper1, Fixed:oper2)
    return fixed(oper1) &gt;= oper2;

stock bool:operator&lt;(Fixed:oper1, oper2)
    return oper1 &lt; fixed(oper2);

stock bool:operator&lt;(oper1, Fixed:oper2)
    return fixed(oper1) &lt; oper2;

stock bool:operator&lt;=(Fixed:oper1, oper2)
    return oper1 &lt;= fixed(oper2);

stock bool:operator&lt;=(oper1, Fixed:oper2)
    return fixed(oper1) &lt;= oper2;

stock bool:operator==(Fixed:oper1, oper2)       /* "==" is commutative */
    return oper1 == fixed(oper2);

stock bool:operator!=(Fixed:oper1, oper2)       /* "!=" is commutative */
    return oper1 != fixed(oper2);

/* forbidden operations */
/*
forward operator%(Fixed:oper1, Fixed:oper2);
forward operator%(Fixed:oper1, oper2);
forward operator%(oper1, Fixed:oper2);
*/

stock operator%(Fixed:oper1, Fixed:oper2)
	return fround(oper1*1000)%fround(oper2*1000);
stock operator%(Fixed:oper1, oper2)
	return fround(oper1*1000)%(oper2*1000);
stock operator%(oper1, Fixed:oper2)
	return (oper1*1000)%fround(oper2*1000);



/***
&lt;function name="RealString"&gt;
	&lt;summary&gt;Converts a String into Rational number.&lt;/summary&gt;
	&lt;param name="string[]" default="" type="a"&gt;&lt;/param&gt;
	&lt;return&gt;New Rational number&lt;/return&gt;
&lt;/function&gt;
&lt;function name="RealRound"&gt;
	&lt;summary&gt;Converts a Rational number into a Whole number&lt;/summary&gt;
	&lt;param name="Real:value" default="" type="n"&gt;&lt;/param&gt;
	&lt;param name="round_method" default="round_normal" type="n"&gt;&lt;/param&gt;
	&lt;return&gt;new whole number.&lt;/return&gt;
&lt;/function&gt;
&lt;function name="RealSqroot"&gt;
	&lt;summary&gt;Returns the square root of a value.&lt;/summary&gt;
	&lt;param name="Real:value" default="" type="n"&gt;&lt;/param&gt;
	&lt;return&gt;square root of a value.&lt;/return&gt;
&lt;/function&gt;
&lt;function name="RealPower"&gt;
	&lt;summary&gt;Returns the value raised to the power of exponent.&lt;/summary&gt;
	&lt;param name="Real:value" default="" type="n"&gt;&lt;/param&gt;
	&lt;param name="exponent" default="" type="n"&gt;&lt;/param&gt;
	&lt;return&gt;the value raised to the power of exponent&lt;/return&gt;
&lt;/function&gt;
&lt;function name="RealAbs"&gt;
	&lt;summary&gt;Returns Absolute value of 'value'.&lt;/summary&gt;
	&lt;param name="Real:value" default="" type="n"&gt;&lt;/param&gt;
&lt;/function&gt;
&lt;function name="RealLog"&gt;
	&lt;summary&gt;Return the logarithm &lt;/summary&gt;
	&lt;param name="Real:value" default="" type="n"&gt;&lt;/param&gt;
	&lt;param name="Real:base" default="10.0" type="n"&gt;&lt;/param&gt;
&lt;/function&gt;
&lt;function name="RealSin"&gt;
	&lt;summary&gt;Return the sine. The input angle may be in radian, degrees or grades.&lt;/summary&gt;
	&lt;param name="Real:value" default="" type="n"&gt;&lt;/param&gt;
	&lt;param name="anglemode:mode" default="radian" type="n"&gt;&lt;/param&gt;
	&lt;return&gt;sine of the angle.&lt;/return&gt;
&lt;/function&gt;
&lt;function name="RealCos"&gt;
	&lt;summary&gt;Return the cosine. The input angle may be in radian, degrees or grades.&lt;/summary&gt;
	&lt;param name="Real:value" default="" type="n"&gt;&lt;/param&gt;
	&lt;param name="anglemode:mode" default="radian" type="n"&gt;&lt;/param&gt;
	&lt;return&gt;cosine of the angle.&lt;/return&gt;
&lt;/function&gt;
&lt;function name="RealTan"&gt;
	&lt;summary&gt;Return the tangent. The input angle may be in radian, degrees or grades.&lt;/summary&gt;
	&lt;param name="Real:value" default="" type="n"&gt;&lt;/param&gt;
	&lt;param name="anglemode:mode" default="radian" type="n"&gt;&lt;/param&gt;
	&lt;return&gt;tangent of the angle.&lt;/return&gt;
&lt;/function&gt;
&lt;function name="RealAtan2"&gt;
	&lt;summary&gt;Return the arctangent of x/y. The input angle may be in radian, degrees or grades.&lt;/summary&gt;
	&lt;param name="Real:value" default="" type="n"&gt;&lt;/param&gt;
	&lt;param name="anglemode:mode" default="radian" type="n"&gt;&lt;/param&gt;
	&lt;notes&gt;Uses fatan2 for Fixed Point Number. Uses floatatan2 for Floating Point Number. &lt;/notes&gt;
	&lt;return&gt;arc tangent of x/y.&lt;/return&gt;
&lt;/function&gt;
&lt;function name="RealClamp"&gt;
	&lt;summary&gt;Return value thats has been limited between min and max.&lt;/summary&gt;
	&lt;param name="Real:value" default="" type="n"&gt;&lt;/param&gt;
	&lt;param name="Real:min" default="" type="n"&gt;&lt;/param&gt;
	&lt;param name="Real:max" default="" type="n"&gt;&lt;/param&gt;
&lt;/function&gt;

***/</pre>
</div>

